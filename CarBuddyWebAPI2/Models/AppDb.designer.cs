#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPI2.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CCSDB")]
	public partial class AppDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCarBrand(CarBrand instance);
    partial void UpdateCarBrand(CarBrand instance);
    partial void DeleteCarBrand(CarBrand instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCurrentPosition(CurrentPosition instance);
    partial void UpdateCurrentPosition(CurrentPosition instance);
    partial void DeleteCurrentPosition(CurrentPosition instance);
    partial void InsertFeedBack(FeedBack instance);
    partial void UpdateFeedBack(FeedBack instance);
    partial void DeleteFeedBack(FeedBack instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertInvitation(Invitation instance);
    partial void UpdateInvitation(Invitation instance);
    partial void DeleteInvitation(Invitation instance);
    partial void InsertHome(Home instance);
    partial void UpdateHome(Home instance);
    partial void DeleteHome(Home instance);
    partial void InsertOffice(Office instance);
    partial void UpdateOffice(Office instance);
    partial void DeleteOffice(Office instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertOrgJoiner(OrgJoiner instance);
    partial void UpdateOrgJoiner(OrgJoiner instance);
    partial void DeleteOrgJoiner(OrgJoiner instance);
    partial void InsertOrgEmployee(OrgEmployee instance);
    partial void UpdateOrgEmployee(OrgEmployee instance);
    partial void DeleteOrgEmployee(OrgEmployee instance);
    partial void InsertOrgRegistration(OrgRegistration instance);
    partial void UpdateOrgRegistration(OrgRegistration instance);
    partial void DeleteOrgRegistration(OrgRegistration instance);
    partial void InsertGroupJoiner(GroupJoiner instance);
    partial void UpdateGroupJoiner(GroupJoiner instance);
    partial void DeleteGroupJoiner(GroupJoiner instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertGroupMember(GroupMember instance);
    partial void UpdateGroupMember(GroupMember instance);
    partial void DeleteGroupMember(GroupMember instance);
    partial void InsertRoutePoint(RoutePoint instance);
    partial void UpdateRoutePoint(RoutePoint instance);
    partial void DeleteRoutePoint(RoutePoint instance);
    partial void InsertComplaint(Complaint instance);
    partial void UpdateComplaint(Complaint instance);
    partial void DeleteComplaint(Complaint instance);
    partial void InsertCarModel(CarModel instance);
    partial void UpdateCarModel(CarModel instance);
    partial void DeleteCarModel(CarModel instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertTrip(Trip instance);
    partial void UpdateTrip(Trip instance);
    partial void DeleteTrip(Trip instance);
    partial void InsertGroupCompany(GroupCompany instance);
    partial void UpdateGroupCompany(GroupCompany instance);
    partial void DeleteGroupCompany(GroupCompany instance);
    partial void InsertPath(Path instance);
    partial void UpdatePath(Path instance);
    partial void DeletePath(Path instance);
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    #endregion
		
		public AppDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AppDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AppDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AppDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AppDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AppDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CarBrand> CarBrands
		{
			get
			{
				return this.GetTable<CarBrand>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<CurrentPosition> CurrentPositions
		{
			get
			{
				return this.GetTable<CurrentPosition>();
			}
		}
		
		public System.Data.Linq.Table<FeedBack> FeedBacks
		{
			get
			{
				return this.GetTable<FeedBack>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Invitation> Invitations
		{
			get
			{
				return this.GetTable<Invitation>();
			}
		}
		
		public System.Data.Linq.Table<Home> Homes
		{
			get
			{
				return this.GetTable<Home>();
			}
		}
		
		public System.Data.Linq.Table<Office> Offices
		{
			get
			{
				return this.GetTable<Office>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<OrgJoiner> OrgJoiners
		{
			get
			{
				return this.GetTable<OrgJoiner>();
			}
		}
		
		public System.Data.Linq.Table<OrgEmployee> OrgEmployees
		{
			get
			{
				return this.GetTable<OrgEmployee>();
			}
		}
		
		public System.Data.Linq.Table<OrgRegistration> OrgRegistrations
		{
			get
			{
				return this.GetTable<OrgRegistration>();
			}
		}
		
		public System.Data.Linq.Table<GroupJoiner> GroupJoiners
		{
			get
			{
				return this.GetTable<GroupJoiner>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<GroupMember> GroupMembers
		{
			get
			{
				return this.GetTable<GroupMember>();
			}
		}
		
		public System.Data.Linq.Table<RoutePoint> RoutePoints
		{
			get
			{
				return this.GetTable<RoutePoint>();
			}
		}
		
		public System.Data.Linq.Table<Complaint> Complaints
		{
			get
			{
				return this.GetTable<Complaint>();
			}
		}
		
		public System.Data.Linq.Table<CarModel> CarModels
		{
			get
			{
				return this.GetTable<CarModel>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Trip> Trips
		{
			get
			{
				return this.GetTable<Trip>();
			}
		}
		
		public System.Data.Linq.Table<GroupCompany> GroupCompanies
		{
			get
			{
				return this.GetTable<GroupCompany>();
			}
		}
		
		public System.Data.Linq.Table<Path> Paths
		{
			get
			{
				return this.GetTable<Path>();
			}
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBrands")]
	public partial class CarBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    #endregion
		
		public CarBrand()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="NVarChar(15)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_Car", Storage="_Cars", ThisKey="Id", OtherKey="CarBrandID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBrandS = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarBrandS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Phone;
		
		private int _OfficeID;
		
		private System.Nullable<int> _Payment;
		
		private System.Nullable<decimal> _Rating;
		
		private System.Nullable<bool> _isDriver;
		
		private System.Nullable<int> _version;
		
		private EntitySet<Car> _Cars;
		
		private EntitySet<Message> _Messages;
		
		private EntitySet<Message> _Messages1;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<Office> _Offices;
		
		private EntitySet<OrgJoiner> _OrgJoiners;
		
		private EntitySet<GroupMember> _GroupMembers;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Trip> _Trips;
		
		private EntitySet<Trip> _Trips1;
		
		private EntitySet<Path> _Paths;
		
		private EntitySet<Home> _Homes;
		
		private EntityRef<Home> _Home;
		
		private EntityRef<OrgJoiner> _OrgJoiner;
		
		private EntityRef<OrgEmployee> _OrgEmployee;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<GroupJoiner> _GroupJoiner;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<Registration> _Registration;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<Path> _Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnOfficeIDChanging(int value);
    partial void OnOfficeIDChanged();
    partial void OnPaymentChanging(System.Nullable<int> value);
    partial void OnPaymentChanged();
    partial void OnRatingChanging(System.Nullable<decimal> value);
    partial void OnRatingChanged();
    partial void OnisDriverChanging(System.Nullable<bool> value);
    partial void OnisDriverChanged();
    partial void OnversionChanging(System.Nullable<int> value);
    partial void OnversionChanged();
    #endregion
		
		public User()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._Messages1 = new EntitySet<Message>(new Action<Message>(this.attach_Messages1), new Action<Message>(this.detach_Messages1));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Offices = new EntitySet<Office>(new Action<Office>(this.attach_Offices), new Action<Office>(this.detach_Offices));
			this._OrgJoiners = new EntitySet<OrgJoiner>(new Action<OrgJoiner>(this.attach_OrgJoiners), new Action<OrgJoiner>(this.detach_OrgJoiners));
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Trips = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips), new Action<Trip>(this.detach_Trips));
			this._Trips1 = new EntitySet<Trip>(new Action<Trip>(this.attach_Trips1), new Action<Trip>(this.detach_Trips1));
			this._Paths = new EntitySet<Path>(new Action<Path>(this.attach_Paths), new Action<Path>(this.detach_Paths));
			this._Homes = new EntitySet<Home>(new Action<Home>(this.attach_Homes), new Action<Home>(this.detach_Homes));
			this._Home = default(EntityRef<Home>);
			this._OrgJoiner = default(EntityRef<OrgJoiner>);
			this._OrgEmployee = default(EntityRef<OrgEmployee>);
			this._Group = default(EntityRef<Group>);
			this._GroupJoiner = default(EntityRef<GroupJoiner>);
			this._Car = default(EntityRef<Car>);
			this._Session = default(EntityRef<Session>);
			this._Registration = default(EntityRef<Registration>);
			this._Schedule = default(EntityRef<Schedule>);
			this._Path = default(EntityRef<Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if ((((((((((this._Home.HasLoadedOrAssignedValue || this._OrgJoiner.HasLoadedOrAssignedValue) 
								|| this._OrgEmployee.HasLoadedOrAssignedValue) 
								|| this._Group.HasLoadedOrAssignedValue) 
								|| this._GroupJoiner.HasLoadedOrAssignedValue) 
								|| this._Car.HasLoadedOrAssignedValue) 
								|| this._Session.HasLoadedOrAssignedValue) 
								|| this._Registration.HasLoadedOrAssignedValue) 
								|| this._Schedule.HasLoadedOrAssignedValue) 
								|| this._Path.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(70)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(70)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeID", DbType="Int NOT NULL")]
		public int OfficeID
		{
			get
			{
				return this._OfficeID;
			}
			set
			{
				if ((this._OfficeID != value))
				{
					this.OnOfficeIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeID = value;
					this.SendPropertyChanged("OfficeID");
					this.OnOfficeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Int")]
		public System.Nullable<int> Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Decimal(2,1)")]
		public System.Nullable<decimal> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDriver", DbType="Bit")]
		public System.Nullable<bool> isDriver
		{
			get
			{
				return this._isDriver;
			}
			set
			{
				if ((this._isDriver != value))
				{
					this.OnisDriverChanging(value);
					this.SendPropertyChanging();
					this._isDriver = value;
					this.SendPropertyChanged("isDriver");
					this.OnisDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="Int")]
		public System.Nullable<int> version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_Cars", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="UID", OtherKey="From")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_Messages1", ThisKey="UID", OtherKey="To")]
		public EntitySet<Message> Messages1
		{
			get
			{
				return this._Messages1;
			}
			set
			{
				this._Messages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Session", Storage="_Sessions", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Office", Storage="_Offices", ThisKey="OfficeID", OtherKey="OfficeID")]
		public EntitySet<Office> Offices
		{
			get
			{
				return this._Offices;
			}
			set
			{
				this._Offices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrgJoiner", Storage="_OrgJoiners", ThisKey="UID", OtherKey="UID")]
		public EntitySet<OrgJoiner> OrgJoiners
		{
			get
			{
				return this._OrgJoiners;
			}
			set
			{
				this._OrgJoiners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupMember", Storage="_GroupMembers", ThisKey="UID", OtherKey="UID")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Schedule", Storage="_Schedules", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Trip", Storage="_Trips", ThisKey="UID", OtherKey="DriverUID")]
		public EntitySet<Trip> Trips
		{
			get
			{
				return this._Trips;
			}
			set
			{
				this._Trips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Trip1", Storage="_Trips1", ThisKey="UID", OtherKey="PassengerUID")]
		public EntitySet<Trip> Trips1
		{
			get
			{
				return this._Trips1;
			}
			set
			{
				this._Trips1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Path", Storage="_Paths", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Path> Paths
		{
			get
			{
				return this._Paths;
			}
			set
			{
				this._Paths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Home", Storage="_Homes", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Home> Homes
		{
			get
			{
				return this._Homes;
			}
			set
			{
				this._Homes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Home_User", Storage="_Home", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Home Home
		{
			get
			{
				return this._Home.Entity;
			}
			set
			{
				Home previousValue = this._Home.Entity;
				if (((previousValue != value) 
							|| (this._Home.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Home.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Home.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Home");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgJoiner_User", Storage="_OrgJoiner", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public OrgJoiner OrgJoiner
		{
			get
			{
				return this._OrgJoiner.Entity;
			}
			set
			{
				OrgJoiner previousValue = this._OrgJoiner.Entity;
				if (((previousValue != value) 
							|| (this._OrgJoiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgJoiner.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._OrgJoiner.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("OrgJoiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_User", Storage="_OrgEmployee", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public OrgEmployee OrgEmployee
		{
			get
			{
				return this._OrgEmployee.Entity;
			}
			set
			{
				OrgEmployee previousValue = this._OrgEmployee.Entity;
				if (((previousValue != value) 
							|| (this._OrgEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgEmployee.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._OrgEmployee.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("OrgEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_User", Storage="_Group", ThisKey="UID", OtherKey="CreatorUID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.CreatorUID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupJoiner_User", Storage="_GroupJoiner", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public GroupJoiner GroupJoiner
		{
			get
			{
				return this._GroupJoiner.Entity;
			}
			set
			{
				GroupJoiner previousValue = this._GroupJoiner.Entity;
				if (((previousValue != value) 
							|| (this._GroupJoiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupJoiner.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._GroupJoiner.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("GroupJoiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_User", Storage="_Car", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_User", Storage="_Session", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_User", Storage="_Registration", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_User", Storage="_Schedule", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Path_User", Storage="_Path", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Path Path
		{
			get
			{
				return this._Path.Entity;
			}
			set
			{
				Path previousValue = this._Path.Entity;
				if (((previousValue != value) 
							|| (this._Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Path.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Path.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.FromUser = null;
		}
		
		private void attach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = this;
		}
		
		private void detach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_OrgJoiners(OrgJoiner entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_OrgJoiners(OrgJoiner entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_Trips(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
		
		private void attach_Trips1(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_Trips1(Trip entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
		
		private void attach_Paths(Path entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Paths(Path entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Homes(Home entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Homes(Home entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private int _CarBrand;
		
		private int _CarModel;
		
		private System.Nullable<byte> _CarCapacity;
		
		private string _CarGovNumber;
		
		private string _CarComfort;
		
		private int _ColorID;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Session> _Sessions;
		
		private EntityRef<User> _User;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<CarBrand> _CarBrandS;
		
		private EntityRef<CarModel> _CarModelS;
		
		private EntityRef<Color> _Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnCarBrandIDChanging(int value);
    partial void OnCarBrandIDChanged();
    partial void OnCarModelIDChanging(int value);
    partial void OnCarModelIDChanged();
    partial void OnCarCapacityChanging(System.Nullable<byte> value);
    partial void OnCarCapacityChanged();
    partial void OnCarGovNumberChanging(string value);
    partial void OnCarGovNumberChanged();
    partial void OnCarComfortChanging(string value);
    partial void OnCarComfortChanged();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    #endregion
		
		public Car()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._User = default(EntityRef<User>);
			this._Session = default(EntityRef<Session>);
			this._CarBrandS = default(EntityRef<CarBrand>);
			this._CarModelS = default(EntityRef<CarModel>);
			this._Color = default(EntityRef<Color>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if ((this._User.HasLoadedOrAssignedValue || this._Session.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CarBrand", Storage="_CarBrand", DbType="Int NOT NULL")]
		public int CarBrandID
		{
			get
			{
				return this._CarBrand;
			}
			set
			{
				if ((this._CarBrand != value))
				{
					this.OnCarBrandIDChanging(value);
					this.SendPropertyChanging();
					this._CarBrand = value;
					this.SendPropertyChanged("CarBrandID");
					this.OnCarBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CarModel", Storage="_CarModel", DbType="Int NOT NULL")]
		public int CarModelID
		{
			get
			{
				return this._CarModel;
			}
			set
			{
				if ((this._CarModel != value))
				{
					this.OnCarModelIDChanging(value);
					this.SendPropertyChanging();
					this._CarModel = value;
					this.SendPropertyChanged("CarModelID");
					this.OnCarModelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarCapacity", DbType="TinyInt")]
		public System.Nullable<byte> CarCapacity
		{
			get
			{
				return this._CarCapacity;
			}
			set
			{
				if ((this._CarCapacity != value))
				{
					this.OnCarCapacityChanging(value);
					this.SendPropertyChanging();
					this._CarCapacity = value;
					this.SendPropertyChanged("CarCapacity");
					this.OnCarCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarGovNumber", DbType="NVarChar(50)")]
		public string CarGovNumber
		{
			get
			{
				return this._CarGovNumber;
			}
			set
			{
				if ((this._CarGovNumber != value))
				{
					this.OnCarGovNumberChanging(value);
					this.SendPropertyChanging();
					this._CarGovNumber = value;
					this.SendPropertyChanged("CarGovNumber");
					this.OnCarGovNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarComfort", DbType="NVarChar(10)")]
		public string CarComfort
		{
			get
			{
				return this._CarComfort;
			}
			set
			{
				if ((this._CarComfort != value))
				{
					this.OnCarComfortChanging(value);
					this.SendPropertyChanging();
					this._CarComfort = value;
					this.SendPropertyChanged("CarComfort");
					this.OnCarComfortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="int NOT NULL")]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Session", Storage="_Sessions", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Car", Storage="_Session", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarBrand_Car", Storage="_CarBrandS", ThisKey="CarBrandID", OtherKey="Id", IsForeignKey=true)]
		public CarBrand CarBrandS
		{
			get
			{
				return this._CarBrandS.Entity;
			}
			set
			{
				CarBrand previousValue = this._CarBrandS.Entity;
				if (((previousValue != value) 
							|| (this._CarBrandS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarBrandS.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarBrandS.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarBrand = value.Id;
					}
					else
					{
						this._CarBrand = default(int);
					}
					this.SendPropertyChanged("CarBrandS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Car", Storage="_CarModelS", ThisKey="CarModelID", OtherKey="Id", IsForeignKey=true)]
		public CarModel CarModelS
		{
			get
			{
				return this._CarModelS.Entity;
			}
			set
			{
				CarModel previousValue = this._CarModelS.Entity;
				if (((previousValue != value) 
							|| (this._CarModelS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarModelS.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarModelS.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarModel = value.Id;
					}
					else
					{
						this._CarModel = default(int);
					}
					this.SendPropertyChanged("CarModelS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Car", Storage="_Color", ThisKey="ColorID", OtherKey="ColorID", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._ColorID = value.ColorID;
					}
					else
					{
						this._ColorID = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentPositions")]
	public partial class CurrentPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<double> _latitude;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    #endregion
		
		public CurrentPosition()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedBacks")]
	public partial class FeedBack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _FromUID;
		
		private System.Nullable<int> _ToUID;
		
		private string _Message;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _TripID;
		
		private System.Nullable<byte> _Rate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFromUIDChanging(System.Nullable<int> value);
    partial void OnFromUIDChanged();
    partial void OnToUIDChanging(System.Nullable<int> value);
    partial void OnToUIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTripIDChanging(System.Nullable<int> value);
    partial void OnTripIDChanged();
    partial void OnRateChanging(System.Nullable<byte> value);
    partial void OnRateChanged();
    #endregion
		
		public FeedBack()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUID", DbType="Int")]
		public System.Nullable<int> FromUID
		{
			get
			{
				return this._FromUID;
			}
			set
			{
				if ((this._FromUID != value))
				{
					this.OnFromUIDChanging(value);
					this.SendPropertyChanging();
					this._FromUID = value;
					this.SendPropertyChanged("FromUID");
					this.OnFromUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUID", DbType="Int")]
		public System.Nullable<int> ToUID
		{
			get
			{
				return this._ToUID;
			}
			set
			{
				if ((this._ToUID != value))
				{
					this.OnToUIDChanging(value);
					this.SendPropertyChanging();
					this._ToUID = value;
					this.SendPropertyChanged("ToUID");
					this.OnToUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripID", DbType="Int")]
		public System.Nullable<int> TripID
		{
			get
			{
				return this._TripID;
			}
			set
			{
				if ((this._TripID != value))
				{
					this.OnTripIDChanging(value);
					this.SendPropertyChanging();
					this._TripID = value;
					this.SendPropertyChanged("TripID");
					this.OnTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="TinyInt")]
		public System.Nullable<byte> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _From;
		
		private int _To;
		
		private System.DateTime _Date;
		
		private string _Text;
		
		private System.Nullable<byte> _Code;
		
		private EntityRef<User> _FromUser;
		
		private EntityRef<User> _ToUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCodeChanging(System.Nullable<byte> value);
    partial void OnCodeChanged();
    #endregion
		
		public Message()
		{
			this._FromUser = default(EntityRef<User>);
			this._ToUser = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="FromUID", Storage="_From", DbType="Int")]
		public int From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ToUID", Storage="_To", DbType="Int")]
		public int To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(210)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="TinyInt")]
		public System.Nullable<byte> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_FromUser", ThisKey="From", OtherKey="UID", IsForeignKey=true)]
		public User FromUser
		{
			get
			{
				return this._FromUser.Entity;
			}
			set
			{
				User previousValue = this._FromUser.Entity;
				if (((previousValue != value) 
							|| (this._FromUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FromUser.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._FromUser.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._From = value.UID;
					}
					else
					{
						this._From = default(int);
					}
					this.SendPropertyChanged("FromUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message1", Storage="_ToUser", ThisKey="To", OtherKey="UID", IsForeignKey=true)]
		public User ToUser
		{
			get
			{
				return this._ToUser.Entity;
			}
			set
			{
				User previousValue = this._ToUser.Entity;
				if (((previousValue != value) 
							|| (this._ToUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToUser.Entity = null;
						previousValue.Messages1.Remove(this);
					}
					this._ToUser.Entity = value;
					if ((value != null))
					{
						value.Messages1.Add(this);
						this._To = value.UID;
					}
					else
					{
						this._To = default(int);
					}
					this.SendPropertyChanged("ToUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registrations")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _Mail;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private System.Nullable<byte> _Errors;
		
		private string _Password;
		
		private string _RSApublic;
		
		private string _RSAprivate;
		
		private System.Nullable<bool> _isConfirmed;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Session> _Sessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    partial void OnErrorsChanging(System.Nullable<byte> value);
    partial void OnErrorsChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRSApublicChanging(string value);
    partial void OnRSApublicChanged();
    partial void OnRSAprivateChanging(string value);
    partial void OnRSAprivateChanged();
    partial void OnisConfirmedChanging(System.Nullable<bool> value);
    partial void OnisConfirmedChanged();
    #endregion
		
		public Registration()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Errors", DbType="TinyInt")]
		public System.Nullable<byte> Errors
		{
			get
			{
				return this._Errors;
			}
			set
			{
				if ((this._Errors != value))
				{
					this.OnErrorsChanging(value);
					this.SendPropertyChanging();
					this._Errors = value;
					this.SendPropertyChanged("Errors");
					this.OnErrorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(32)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSApublic", DbType="NVarChar(450)")]
		public string RSApublic
		{
			get
			{
				return this._RSApublic;
			}
			set
			{
				if ((this._RSApublic != value))
				{
					this.OnRSApublicChanging(value);
					this.SendPropertyChanging();
					this._RSApublic = value;
					this.SendPropertyChanged("RSApublic");
					this.OnRSApublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSAprivate", DbType="NVarChar(1700)")]
		public string RSAprivate
		{
			get
			{
				return this._RSAprivate;
			}
			set
			{
				if ((this._RSAprivate != value))
				{
					this.OnRSAprivateChanging(value);
					this.SendPropertyChanging();
					this._RSAprivate = value;
					this.SendPropertyChanged("RSAprivate");
					this.OnRSAprivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isConfirmed", DbType="Bit")]
		public System.Nullable<bool> isConfirmed
		{
			get
			{
				return this._isConfirmed;
			}
			set
			{
				if ((this._isConfirmed != value))
				{
					this.OnisConfirmedChanging(value);
					this.SendPropertyChanging();
					this._isConfirmed = value;
					this.SendPropertyChanged("isConfirmed");
					this.OnisConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Session", Storage="_Sessions", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UID;
		
		private System.Nullable<int> _Code;
		
		private System.Nullable<System.DateTime> _Stamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnCodeChanging(System.Nullable<int> value);
    partial void OnCodeChanged();
    partial void OnStampChanging(System.Nullable<System.DateTime> value);
    partial void OnStampChanged();
    #endregion
		
		public Service()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Int")]
		public System.Nullable<int> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> Stamp
		{
			get
			{
				return this._Stamp;
			}
			set
			{
				if ((this._Stamp != value))
				{
					this.OnStampChanging(value);
					this.SendPropertyChanging();
					this._Stamp = value;
					this.SendPropertyChanged("Stamp");
					this.OnStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UID;
		
		private string _Key;
		
		private System.Nullable<byte> _Errors;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Car> _Cars;
		
		private EntitySet<Home> _Homes;
		
		private EntitySet<OrgEmployee> _OrgEmployees;
		
		private EntityRef<Registration> _Registration;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnCryptKeyChanging(string value);
    partial void OnCryptKeyChanged();
    partial void OnErrorsChanging(System.Nullable<byte> value);
    partial void OnErrorsChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Session()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._Homes = new EntitySet<Home>(new Action<Home>(this.attach_Homes), new Action<Home>(this.detach_Homes));
			this._OrgEmployees = new EntitySet<OrgEmployee>(new Action<OrgEmployee>(this.attach_OrgEmployees), new Action<OrgEmployee>(this.detach_OrgEmployees));
			this._Registration = default(EntityRef<Registration>);
			this._Car = default(EntityRef<Car>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (((this._Registration.HasLoadedOrAssignedValue || this._Car.HasLoadedOrAssignedValue) 
								|| this._User.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Cryptkey", Storage="_Key", DbType="NVarChar(MAX)")]
		public string CryptKey
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnCryptKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("CryptKey");
					this.OnCryptKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Errors", DbType="TinyInt")]
		public System.Nullable<byte> Errors
		{
			get
			{
				return this._Errors;
			}
			set
			{
				if ((this._Errors != value))
				{
					this.OnErrorsChanging(value);
					this.SendPropertyChanging();
					this._Errors = value;
					this.SendPropertyChanged("Errors");
					this.OnErrorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Car", Storage="_Cars", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Home", Storage="_Homes", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Home> Homes
		{
			get
			{
				return this._Homes;
			}
			set
			{
				this._Homes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_OrgEmployee", Storage="_OrgEmployees", ThisKey="UID", OtherKey="UID")]
		public EntitySet<OrgEmployee> OrgEmployees
		{
			get
			{
				return this._OrgEmployees;
			}
			set
			{
				this._OrgEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Session", Storage="_Registration", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Session", Storage="_Car", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Session", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Homes(Home entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Homes(Home entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_OrgEmployees(OrgEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_OrgEmployees(OrgEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invitations")]
	public partial class Invitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Driver;
		
		private System.Nullable<int> _Passanger;
		
		private System.Nullable<bool> _Confirmed;
		
		private System.Nullable<bool> _isToDriver;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDriverChanging(System.Nullable<int> value);
    partial void OnDriverChanged();
    partial void OnPassangerChanging(System.Nullable<int> value);
    partial void OnPassangerChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    partial void OnisToDriverChanging(System.Nullable<bool> value);
    partial void OnisToDriverChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Invitation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver", DbType="Int")]
		public System.Nullable<int> Driver
		{
			get
			{
				return this._Driver;
			}
			set
			{
				if ((this._Driver != value))
				{
					this.OnDriverChanging(value);
					this.SendPropertyChanging();
					this._Driver = value;
					this.SendPropertyChanged("Driver");
					this.OnDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passanger", DbType="Int")]
		public System.Nullable<int> Passanger
		{
			get
			{
				return this._Passanger;
			}
			set
			{
				if ((this._Passanger != value))
				{
					this.OnPassangerChanging(value);
					this.SendPropertyChanging();
					this._Passanger = value;
					this.SendPropertyChanged("Passanger");
					this.OnPassangerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isToDriver", DbType="Bit")]
		public System.Nullable<bool> isToDriver
		{
			get
			{
				return this._isToDriver;
			}
			set
			{
				if ((this._isToDriver != value))
				{
					this.OnisToDriverChanging(value);
					this.SendPropertyChanging();
					this._isToDriver = value;
					this.SendPropertyChanged("isToDriver");
					this.OnisToDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Homes")]
	public partial class Home : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private double _longitude;
		
		private double _latitude;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnlongtitudeChanging(double value);
    partial void OnlongtitudeChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    #endregion
		
		public Home()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Session = default(EntityRef<Session>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if ((this._Session.HasLoadedOrAssignedValue || this._User.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public double longtitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongtitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longtitude");
					this.OnlongtitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Home_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Home", Storage="_Session", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Homes.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Homes.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Home", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Homes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Homes.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Home = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Home = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offices")]
	public partial class Office : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OfficeID;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<double> _latitude;
		
		private string _Name;
		
		private int _OrgID;
		
		private System.Nullable<int> _GroupCompanyID;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<User> _User;
		
		private EntityRef<OrgEmployee> _OrgEmployee;
		
		private EntityRef<GroupCompany> _GroupCompanyByGCID;
		
		private EntityRef<GroupCompany> _GroupCompanyByOrgID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfficeIDChanging(int value);
    partial void OnOfficeIDChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnGroupCompanyIDChanging(System.Nullable<int> value);
    partial void OnGroupCompanyIDChanged();
    #endregion
		
		public Office()
		{
			this._Organization = default(EntityRef<Organization>);
			this._User = default(EntityRef<User>);
			this._OrgEmployee = default(EntityRef<OrgEmployee>);
			this._GroupCompanyByGCID = default(EntityRef<GroupCompany>);
			this._GroupCompanyByOrgID = default(EntityRef<GroupCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OfficeID
		{
			get
			{
				return this._OfficeID;
			}
			set
			{
				if ((this._OfficeID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfficeIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeID = value;
					this.SendPropertyChanged("OfficeID");
					this.OnOfficeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(32)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL")]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (((this._Organization.HasLoadedOrAssignedValue || this._OrgEmployee.HasLoadedOrAssignedValue) 
								|| this._GroupCompanyByOrgID.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupCompanyID", DbType="int")]
		public System.Nullable<int> GroupCompanyID
		{
			get
			{
				return this._GroupCompanyID;
			}
			set
			{
				if ((this._GroupCompanyID != value))
				{
					if (this._GroupCompanyByGCID.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCompanyID = value;
					this.SendPropertyChanged("GroupCompanyID");
					this.OnGroupCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Office", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Offices.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Offices.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Office", Storage="_User", ThisKey="OfficeID", OtherKey="OfficeID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Offices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Offices.Add(this);
						this._OfficeID = value.OfficeID;
					}
					else
					{
						this._OfficeID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_Office", Storage="_OrgEmployee", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public OrgEmployee OrgEmployee
		{
			get
			{
				return this._OrgEmployee.Entity;
			}
			set
			{
				OrgEmployee previousValue = this._OrgEmployee.Entity;
				if (((previousValue != value) 
							|| (this._OrgEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgEmployee.Entity = null;
						previousValue.Offices.Remove(this);
					}
					this._OrgEmployee.Entity = value;
					if ((value != null))
					{
						value.Offices.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("OrgEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_Office", Storage="_GroupCompanyByGCID", ThisKey="GroupCompanyID", OtherKey="GroupCompanyID", IsForeignKey=true)]
		public GroupCompany GroupCompanyByGCID
		{
			get
			{
				return this._GroupCompanyByGCID.Entity;
			}
			set
			{
				GroupCompany previousValue = this._GroupCompanyByGCID.Entity;
				if (((previousValue != value) 
							|| (this._GroupCompanyByGCID.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCompanyByGCID.Entity = null;
						previousValue.OfficesByGroupCompanyGCID.Remove(this);
					}
					this._GroupCompanyByGCID.Entity = value;
					if ((value != null))
					{
						value.OfficesByGroupCompanyGCID.Add(this);
						this._GroupCompanyID = value.GroupCompanyID;
					}
					else
					{
						this._GroupCompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupCompanyByGCID");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_Office1", Storage="_GroupCompanyByOrgID", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public GroupCompany GroupCompanyByOrgID
		{
			get
			{
				return this._GroupCompanyByOrgID.Entity;
			}
			set
			{
				GroupCompany previousValue = this._GroupCompanyByOrgID.Entity;
				if (((previousValue != value) 
							|| (this._GroupCompanyByOrgID.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCompanyByOrgID.Entity = null;
						previousValue.OfficesByGroupCompanyOrgID.Remove(this);
					}
					this._GroupCompanyByOrgID.Entity = value;
					if ((value != null))
					{
						value.OfficesByGroupCompanyOrgID.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("GroupCompanyByOrgID");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organizations")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private string _Name;
		
		private string _Domain;
		
		private System.Nullable<bool> _isApproved;
		
		private EntitySet<Office> _Offices;
		
		private EntitySet<OrgEmployee> _OrgEmployees;
		
		private EntitySet<GroupCompany> _GroupCompanies;
		
		private EntityRef<OrgJoiner> _OrgJoiner;
		
		private EntityRef<GroupCompany> _GroupCompany;
		
		private EntityRef<OrgEmployee> _OrgEmployee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnisApprovedChanging(System.Nullable<bool> value);
    partial void OnisApprovedChanged();
    #endregion
		
		public Organization()
		{
			this._Offices = new EntitySet<Office>(new Action<Office>(this.attach_Offices), new Action<Office>(this.detach_Offices));
			this._OrgEmployees = new EntitySet<OrgEmployee>(new Action<OrgEmployee>(this.attach_OrgEmployees), new Action<OrgEmployee>(this.detach_OrgEmployees));
			this._GroupCompanies = new EntitySet<GroupCompany>(new Action<GroupCompany>(this.attach_GroupCompanies), new Action<GroupCompany>(this.detach_GroupCompanies));
			this._OrgJoiner = default(EntityRef<OrgJoiner>);
			this._GroupCompany = default(EntityRef<GroupCompany>);
			this._OrgEmployee = default(EntityRef<OrgEmployee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (((this._OrgJoiner.HasLoadedOrAssignedValue || this._GroupCompany.HasLoadedOrAssignedValue) 
								|| this._OrgEmployee.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="NVarChar(120)", CanBeNull=false)]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isApproved", DbType="Bit")]
		public System.Nullable<bool> isApproved
		{
			get
			{
				return this._isApproved;
			}
			set
			{
				if ((this._isApproved != value))
				{
					this.OnisApprovedChanging(value);
					this.SendPropertyChanging();
					this._isApproved = value;
					this.SendPropertyChanged("isApproved");
					this.OnisApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Office", Storage="_Offices", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Office> Offices
		{
			get
			{
				return this._Offices;
			}
			set
			{
				this._Offices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrgEmployee", Storage="_OrgEmployees", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<OrgEmployee> OrgEmployees
		{
			get
			{
				return this._OrgEmployees;
			}
			set
			{
				this._OrgEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_GroupCompany", Storage="_GroupCompanies", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<GroupCompany> GroupCompanies
		{
			get
			{
				return this._GroupCompanies;
			}
			set
			{
				this._GroupCompanies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgJoiner_Organization", Storage="_OrgJoiner", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public OrgJoiner OrgJoiner
		{
			get
			{
				return this._OrgJoiner.Entity;
			}
			set
			{
				OrgJoiner previousValue = this._OrgJoiner.Entity;
				if (((previousValue != value) 
							|| (this._OrgJoiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgJoiner.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._OrgJoiner.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("OrgJoiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_Organization", Storage="_GroupCompany", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public GroupCompany GroupCompany
		{
			get
			{
				return this._GroupCompany.Entity;
			}
			set
			{
				GroupCompany previousValue = this._GroupCompany.Entity;
				if (((previousValue != value) 
							|| (this._GroupCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCompany.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._GroupCompany.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("GroupCompany");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_Organization", Storage="_OrgEmployee", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public OrgEmployee OrgEmployee
		{
			get
			{
				return this._OrgEmployee.Entity;
			}
			set
			{
				OrgEmployee previousValue = this._OrgEmployee.Entity;
				if (((previousValue != value) 
							|| (this._OrgEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgEmployee.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._OrgEmployee.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("OrgEmployee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrgEmployees(OrgEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrgEmployees(OrgEmployee entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_GroupCompanies(GroupCompany entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_GroupCompanies(GroupCompany entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgJoiners")]
	public partial class OrgJoiner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UID;
		
		private string _Password;
		
		private int _OrgID;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Organization> _Organizations;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    #endregion
		
		public OrgJoiner()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(33)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL")]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgJoiner_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgJoiner_Organization", Storage="_Organizations", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_OrgJoiner", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.OrgJoiners.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.OrgJoiners.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.OrgJoiner = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.OrgJoiner = null;
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgJoiner = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgJoiner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgEmployees")]
	public partial class OrgEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UID;
		
		private int _OrgID;
		
		private System.Nullable<bool> _isVisibile;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Office> _Offices;
		
		private EntitySet<Organization> _Organizations;
		
		private EntitySet<GroupCompany> _GroupCompanies;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Session> _Session;
		
		private EntityRef<GroupCompany> _GroupCompany;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnisVisibileChanging(System.Nullable<bool> value);
    partial void OnisVisibileChanged();
    #endregion
		
		public OrgEmployee()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Offices = new EntitySet<Office>(new Action<Office>(this.attach_Offices), new Action<Office>(this.detach_Offices));
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			this._GroupCompanies = new EntitySet<GroupCompany>(new Action<GroupCompany>(this.attach_GroupCompanies), new Action<GroupCompany>(this.detach_GroupCompanies));
			this._Organization = default(EntityRef<Organization>);
			this._Session = default(EntityRef<Session>);
			this._GroupCompany = default(EntityRef<GroupCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL")]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if ((this._Organization.HasLoadedOrAssignedValue || this._GroupCompany.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVisibile", DbType="Bit")]
		public System.Nullable<bool> isVisibile
		{
			get
			{
				return this._isVisibile;
			}
			set
			{
				if ((this._isVisibile != value))
				{
					this.OnisVisibileChanging(value);
					this.SendPropertyChanging();
					this._isVisibile = value;
					this.SendPropertyChanged("isVisibile");
					this.OnisVisibileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_Office", Storage="_Offices", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Office> Offices
		{
			get
			{
				return this._Offices;
			}
			set
			{
				this._Offices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_Organization", Storage="_Organizations", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_GroupCompany", Storage="_GroupCompanies", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<GroupCompany> GroupCompanies
		{
			get
			{
				return this._GroupCompanies;
			}
			set
			{
				this._GroupCompanies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrgEmployee", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrgEmployees.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrgEmployees.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_OrgEmployee", Storage="_Session", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.OrgEmployees.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.OrgEmployees.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_OrgEmployee", Storage="_GroupCompany", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public GroupCompany GroupCompany
		{
			get
			{
				return this._GroupCompany.Entity;
			}
			set
			{
				GroupCompany previousValue = this._GroupCompany.Entity;
				if (((previousValue != value) 
							|| (this._GroupCompany.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupCompany.Entity = null;
						previousValue.OrgEmployees.Remove(this);
					}
					this._GroupCompany.Entity = value;
					if ((value != null))
					{
						value.OrgEmployees.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("GroupCompany");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = null;
		}
		
		private void attach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = this;
		}
		
		private void detach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = null;
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = null;
		}
		
		private void attach_GroupCompanies(GroupCompany entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = this;
		}
		
		private void detach_GroupCompanies(GroupCompany entity)
		{
			this.SendPropertyChanging();
			entity.OrgEmployee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgRegistrations")]
	public partial class OrgRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Domain;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDomainChanging(string value);
    partial void OnDomainChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    #endregion
		
		public OrgRegistration()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(120)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain", DbType="NVarChar(120)")]
		public string Domain
		{
			get
			{
				return this._Domain;
			}
			set
			{
				if ((this._Domain != value))
				{
					this.OnDomainChanging(value);
					this.SendPropertyChanging();
					this._Domain = value;
					this.SendPropertyChanged("Domain");
					this.OnDomainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupJoiners")]
	public partial class GroupJoiner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UID;
		
		private string _Password;
		
		private int _GroupID;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    #endregion
		
		public GroupJoiner()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(33)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupJoiner_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupJoiner", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupJoiners.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupJoiners.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.GroupJoiner = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.GroupJoiner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupID;
		
		private string _Name;
		
		private int _CreatorUID;
		
		private EntitySet<User> _Users;
		
		private EntitySet<GroupJoiner> _GroupJoiners;
		
		private EntitySet<GroupMember> _GroupMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatorUIDChanging(int value);
    partial void OnCreatorUIDChanged();
    #endregion
		
		public Group()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._GroupJoiners = new EntitySet<GroupJoiner>(new Action<GroupJoiner>(this.attach_GroupJoiners), new Action<GroupJoiner>(this.detach_GroupJoiners));
			this._GroupMembers = new EntitySet<GroupMember>(new Action<GroupMember>(this.attach_GroupMembers), new Action<GroupMember>(this.detach_GroupMembers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUID", DbType="Int NOT NULL")]
		public int CreatorUID
		{
			get
			{
				return this._CreatorUID;
			}
			set
			{
				if ((this._CreatorUID != value))
				{
					this.OnCreatorUIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorUID = value;
					this.SendPropertyChanged("CreatorUID");
					this.OnCreatorUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_User", Storage="_Users", ThisKey="CreatorUID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupJoiner", Storage="_GroupJoiners", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<GroupJoiner> GroupJoiners
		{
			get
			{
				return this._GroupJoiners;
			}
			set
			{
				this._GroupJoiners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupMember", Storage="_GroupMembers", ThisKey="GroupID", OtherKey="GroupID")]
		public EntitySet<GroupMember> GroupMembers
		{
			get
			{
				return this._GroupMembers;
			}
			set
			{
				this._GroupMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_GroupJoiners(GroupJoiner entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupJoiners(GroupJoiner entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupMembers(GroupMember entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupMembers")]
	public partial class GroupMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UID;
		
		private int _GroupID;
		
		private System.Nullable<bool> _isVisibile;
		
		private EntityRef<User> _User;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnGroupIDChanging(int value);
    partial void OnGroupIDChanged();
    partial void OnisVisibileChanging(System.Nullable<bool> value);
    partial void OnisVisibileChanged();
    #endregion
		
		public GroupMember()
		{
			this._User = default(EntityRef<User>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int NOT NULL")]
		public int GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVisibile", DbType="Bit")]
		public System.Nullable<bool> isVisibile
		{
			get
			{
				return this._isVisibile;
			}
			set
			{
				if ((this._isVisibile != value))
				{
					this.OnisVisibileChanging(value);
					this.SendPropertyChanging();
					this._isVisibile = value;
					this.SendPropertyChanged("isVisibile");
					this.OnisVisibileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupMember", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupMember", Storage="_Group", ThisKey="GroupID", OtherKey="GroupID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupMembers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupMembers.Add(this);
						this._GroupID = value.GroupID;
					}
					else
					{
						this._GroupID = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoutePoints")]
	public partial class RoutePoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoutePointId;
		
		private double _longtitude;
		
		private double _latitude;
		
		private int _PathID;
		
		private EntitySet<Path> _Paths;
		
		private EntityRef<Path> _Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoutePointIdChanging(int value);
    partial void OnRoutePointIdChanged();
    partial void OnlongtitudeChanging(double value);
    partial void OnlongtitudeChanged();
    partial void OnlatitudeChanging(double value);
    partial void OnlatitudeChanged();
    partial void OnPathIDChanging(int value);
    partial void OnPathIDChanged();
    #endregion
		
		public RoutePoint()
		{
			this._Paths = new EntitySet<Path>(new Action<Path>(this.attach_Paths), new Action<Path>(this.detach_Paths));
			this._Path = default(EntityRef<Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoutePointId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoutePointId
		{
			get
			{
				return this._RoutePointId;
			}
			set
			{
				if ((this._RoutePointId != value))
				{
					this.OnRoutePointIdChanging(value);
					this.SendPropertyChanging();
					this._RoutePointId = value;
					this.SendPropertyChanged("RoutePointId");
					this.OnRoutePointIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longtitude", DbType="Float NOT NULL")]
		public double longtitude
		{
			get
			{
				return this._longtitude;
			}
			set
			{
				if ((this._longtitude != value))
				{
					this.OnlongtitudeChanging(value);
					this.SendPropertyChanging();
					this._longtitude = value;
					this.SendPropertyChanged("longtitude");
					this.OnlongtitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float NOT NULL")]
		public double latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathID", DbType="Int")]
		public int PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					if (this._Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIDChanging(value);
					this.SendPropertyChanging();
					this._PathID = value;
					this.SendPropertyChanged("PathID");
					this.OnPathIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoutePoint_Path", Storage="_Paths", ThisKey="PathID", OtherKey="PathID")]
		public EntitySet<Path> Paths
		{
			get
			{
				return this._Paths;
			}
			set
			{
				this._Paths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Path_RoutePoint", Storage="_Path", ThisKey="PathID", OtherKey="PathID", IsForeignKey=true)]
		public Path Path
		{
			get
			{
				return this._Path.Entity;
			}
			set
			{
				Path previousValue = this._Path.Entity;
				if (((previousValue != value) 
							|| (this._Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Path.Entity = null;
						previousValue.RoutePoints.Remove(this);
					}
					this._Path.Entity = value;
					if ((value != null))
					{
						value.RoutePoints.Add(this);
						this._PathID = value.PathID;
					}
					else
					{
						this._PathID = default(int);
					}
					this.SendPropertyChanged("Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Paths(Path entity)
		{
			this.SendPropertyChanging();
			entity.RoutePoint = this;
		}
		
		private void detach_Paths(Path entity)
		{
			this.SendPropertyChanging();
			entity.RoutePoint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Complaints")]
	public partial class Complaint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private short _SysCode;
		
		private int _UniqID;
		
		private int _FromUID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSysCodeChanging(short value);
    partial void OnSysCodeChanged();
    partial void OnUniqIDChanging(int value);
    partial void OnUniqIDChanged();
    partial void OnFromUIDChanging(int value);
    partial void OnFromUIDChanged();
    #endregion
		
		public Complaint()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysCode", DbType="SmallInt NOT NULL")]
		public short SysCode
		{
			get
			{
				return this._SysCode;
			}
			set
			{
				if ((this._SysCode != value))
				{
					this.OnSysCodeChanging(value);
					this.SendPropertyChanging();
					this._SysCode = value;
					this.SendPropertyChanged("SysCode");
					this.OnSysCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqID", DbType="Int NOT NULL")]
		public int UniqID
		{
			get
			{
				return this._UniqID;
			}
			set
			{
				if ((this._UniqID != value))
				{
					this.OnUniqIDChanging(value);
					this.SendPropertyChanging();
					this._UniqID = value;
					this.SendPropertyChanged("UniqID");
					this.OnUniqIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUID", DbType="Int NOT NULL")]
		public int FromUID
		{
			get
			{
				return this._FromUID;
			}
			set
			{
				if ((this._FromUID != value))
				{
					this.OnFromUIDChanging(value);
					this.SendPropertyChanging();
					this._FromUID = value;
					this.SendPropertyChanged("FromUID");
					this.OnFromUIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarModels")]
	public partial class CarModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Model;
		
		private int _CarBrandID;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnCarBrandIDChanging(int value);
    partial void OnCarBrandIDChanged();
    #endregion
		
		public CarModel()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(20)")]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarBrandID", DbType="Int NOT NULL")]
		public int CarBrandID
		{
			get
			{
				return this._CarBrandID;
			}
			set
			{
				if ((this._CarBrandID != value))
				{
					this.OnCarBrandIDChanging(value);
					this.SendPropertyChanging();
					this._CarBrandID = value;
					this.SendPropertyChanged("CarBrandID");
					this.OnCarBrandIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarModel_Car", Storage="_Cars", ThisKey="Id", OtherKey="CarModelID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarModelS = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarModelS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedules")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private System.TimeSpan _MonToHome;
		
		private System.TimeSpan _TueToHome;
		
		private System.TimeSpan _WedToHome;
		
		private System.TimeSpan _ThuToHome;
		
		private System.TimeSpan _FriToHome;
		
		private System.TimeSpan _SatToHome;
		
		private System.TimeSpan _SunToHome;
		
		private System.TimeSpan _MonToWork;
		
		private System.TimeSpan _TueToWork;
		
		private System.TimeSpan _WedToWork;
		
		private System.TimeSpan _ThuToWork;
		
		private System.TimeSpan _FriToWork;
		
		private System.TimeSpan _SatToWork;
		
		private System.TimeSpan _SunToWork;
		
		private bool _isMon;
		
		private bool _isTue;
		
		private bool _isWed;
		
		private bool _isThu;
		
		private bool _isFri;
		
		private bool _isSat;
		
		private bool _isSun;
		
		private bool _IsEnabled;
		
		private int _ScheduleID;
		
		private EntitySet<User> _Users;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnMonToHomeChanging(System.TimeSpan value);
    partial void OnMonToHomeChanged();
    partial void OnTueToHomeChanging(System.TimeSpan value);
    partial void OnTueToHomeChanged();
    partial void OnWedToHomeChanging(System.TimeSpan value);
    partial void OnWedToHomeChanged();
    partial void OnThuToHomeChanging(System.TimeSpan value);
    partial void OnThuToHomeChanged();
    partial void OnFriToHomeChanging(System.TimeSpan value);
    partial void OnFriToHomeChanged();
    partial void OnSatToHomeChanging(System.TimeSpan value);
    partial void OnSatToHomeChanged();
    partial void OnSunToHomeChanging(System.TimeSpan value);
    partial void OnSunToHomeChanged();
    partial void OnMonToWorkChanging(System.TimeSpan value);
    partial void OnMonToWorkChanged();
    partial void OnTueToWorkChanging(System.TimeSpan value);
    partial void OnTueToWorkChanged();
    partial void OnWedToWorkChanging(System.TimeSpan value);
    partial void OnWedToWorkChanged();
    partial void OnThuToWorkChanging(System.TimeSpan value);
    partial void OnThuToWorkChanged();
    partial void OnFriToWorkChanging(System.TimeSpan value);
    partial void OnFriToWorkChanged();
    partial void OnSatToWorkChanging(System.TimeSpan value);
    partial void OnSatToWorkChanged();
    partial void OnSunToWorkChanging(System.TimeSpan value);
    partial void OnSunToWorkChanged();
    partial void OnisMonChanging(bool value);
    partial void OnisMonChanged();
    partial void OnisTueChanging(bool value);
    partial void OnisTueChanged();
    partial void OnisWedChanging(bool value);
    partial void OnisWedChanged();
    partial void OnisThuChanging(bool value);
    partial void OnisThuChanged();
    partial void OnisFriChanging(bool value);
    partial void OnisFriChanged();
    partial void OnisSatChanging(bool value);
    partial void OnisSatChanged();
    partial void OnisSunChanging(bool value);
    partial void OnisSunChanged();
    partial void OnIsEnabledChanging(bool value);
    partial void OnIsEnabledChanged();
    partial void OnScheduleIDChanging(int value);
    partial void OnScheduleIDChanged();
    #endregion
		
		public Schedule()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonToHome", DbType="Time NOT NULL")]
		public System.TimeSpan MonToHome
		{
			get
			{
				return this._MonToHome;
			}
			set
			{
				if ((this._MonToHome != value))
				{
					this.OnMonToHomeChanging(value);
					this.SendPropertyChanging();
					this._MonToHome = value;
					this.SendPropertyChanged("MonToHome");
					this.OnMonToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TueToHome", DbType="Time NOT NULL")]
		public System.TimeSpan TueToHome
		{
			get
			{
				return this._TueToHome;
			}
			set
			{
				if ((this._TueToHome != value))
				{
					this.OnTueToHomeChanging(value);
					this.SendPropertyChanging();
					this._TueToHome = value;
					this.SendPropertyChanged("TueToHome");
					this.OnTueToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WedToHome", DbType="Time NOT NULL")]
		public System.TimeSpan WedToHome
		{
			get
			{
				return this._WedToHome;
			}
			set
			{
				if ((this._WedToHome != value))
				{
					this.OnWedToHomeChanging(value);
					this.SendPropertyChanging();
					this._WedToHome = value;
					this.SendPropertyChanged("WedToHome");
					this.OnWedToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThuToHome", DbType="Time NOT NULL")]
		public System.TimeSpan ThuToHome
		{
			get
			{
				return this._ThuToHome;
			}
			set
			{
				if ((this._ThuToHome != value))
				{
					this.OnThuToHomeChanging(value);
					this.SendPropertyChanging();
					this._ThuToHome = value;
					this.SendPropertyChanged("ThuToHome");
					this.OnThuToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriToHome", DbType="Time NOT NULL")]
		public System.TimeSpan FriToHome
		{
			get
			{
				return this._FriToHome;
			}
			set
			{
				if ((this._FriToHome != value))
				{
					this.OnFriToHomeChanging(value);
					this.SendPropertyChanging();
					this._FriToHome = value;
					this.SendPropertyChanged("FriToHome");
					this.OnFriToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SatToHome", DbType="Time NOT NULL")]
		public System.TimeSpan SatToHome
		{
			get
			{
				return this._SatToHome;
			}
			set
			{
				if ((this._SatToHome != value))
				{
					this.OnSatToHomeChanging(value);
					this.SendPropertyChanging();
					this._SatToHome = value;
					this.SendPropertyChanged("SatToHome");
					this.OnSatToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SunToHome", DbType="Time NOT NULL")]
		public System.TimeSpan SunToHome
		{
			get
			{
				return this._SunToHome;
			}
			set
			{
				if ((this._SunToHome != value))
				{
					this.OnSunToHomeChanging(value);
					this.SendPropertyChanging();
					this._SunToHome = value;
					this.SendPropertyChanged("SunToHome");
					this.OnSunToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonToWork", DbType="Time NOT NULL")]
		public System.TimeSpan MonToWork
		{
			get
			{
				return this._MonToWork;
			}
			set
			{
				if ((this._MonToWork != value))
				{
					this.OnMonToWorkChanging(value);
					this.SendPropertyChanging();
					this._MonToWork = value;
					this.SendPropertyChanged("MonToWork");
					this.OnMonToWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TueToWork", DbType="Time NOT NULL")]
		public System.TimeSpan TueToWork
		{
			get
			{
				return this._TueToWork;
			}
			set
			{
				if ((this._TueToWork != value))
				{
					this.OnTueToWorkChanging(value);
					this.SendPropertyChanging();
					this._TueToWork = value;
					this.SendPropertyChanged("TueToWork");
					this.OnTueToWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WedToWork", DbType="Time NOT NULL")]
		public System.TimeSpan WedToWork
		{
			get
			{
				return this._WedToWork;
			}
			set
			{
				if ((this._WedToWork != value))
				{
					this.OnWedToWorkChanging(value);
					this.SendPropertyChanging();
					this._WedToWork = value;
					this.SendPropertyChanged("WedToWork");
					this.OnWedToWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThuToWork", DbType="Time NOT NULL")]
		public System.TimeSpan ThuToWork
		{
			get
			{
				return this._ThuToWork;
			}
			set
			{
				if ((this._ThuToWork != value))
				{
					this.OnThuToWorkChanging(value);
					this.SendPropertyChanging();
					this._ThuToWork = value;
					this.SendPropertyChanged("ThuToWork");
					this.OnThuToWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriToWork", DbType="Time NOT NULL")]
		public System.TimeSpan FriToWork
		{
			get
			{
				return this._FriToWork;
			}
			set
			{
				if ((this._FriToWork != value))
				{
					this.OnFriToWorkChanging(value);
					this.SendPropertyChanging();
					this._FriToWork = value;
					this.SendPropertyChanged("FriToWork");
					this.OnFriToWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SatToWork", DbType="Time NOT NULL")]
		public System.TimeSpan SatToWork
		{
			get
			{
				return this._SatToWork;
			}
			set
			{
				if ((this._SatToWork != value))
				{
					this.OnSatToWorkChanging(value);
					this.SendPropertyChanging();
					this._SatToWork = value;
					this.SendPropertyChanged("SatToWork");
					this.OnSatToWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SunToWork", DbType="Time NOT NULL")]
		public System.TimeSpan SunToWork
		{
			get
			{
				return this._SunToWork;
			}
			set
			{
				if ((this._SunToWork != value))
				{
					this.OnSunToWorkChanging(value);
					this.SendPropertyChanging();
					this._SunToWork = value;
					this.SendPropertyChanged("SunToWork");
					this.OnSunToWorkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isMon", DbType="Bit NOT NULL")]
		public bool isMon
		{
			get
			{
				return this._isMon;
			}
			set
			{
				if ((this._isMon != value))
				{
					this.OnisMonChanging(value);
					this.SendPropertyChanging();
					this._isMon = value;
					this.SendPropertyChanged("isMon");
					this.OnisMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTue", DbType="Bit NOT NULL")]
		public bool isTue
		{
			get
			{
				return this._isTue;
			}
			set
			{
				if ((this._isTue != value))
				{
					this.OnisTueChanging(value);
					this.SendPropertyChanging();
					this._isTue = value;
					this.SendPropertyChanged("isTue");
					this.OnisTueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isWed", DbType="Bit NOT NULL")]
		public bool isWed
		{
			get
			{
				return this._isWed;
			}
			set
			{
				if ((this._isWed != value))
				{
					this.OnisWedChanging(value);
					this.SendPropertyChanging();
					this._isWed = value;
					this.SendPropertyChanged("isWed");
					this.OnisWedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isThu", DbType="Bit NOT NULL")]
		public bool isThu
		{
			get
			{
				return this._isThu;
			}
			set
			{
				if ((this._isThu != value))
				{
					this.OnisThuChanging(value);
					this.SendPropertyChanging();
					this._isThu = value;
					this.SendPropertyChanged("isThu");
					this.OnisThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFri", DbType="Bit NOT NULL")]
		public bool isFri
		{
			get
			{
				return this._isFri;
			}
			set
			{
				if ((this._isFri != value))
				{
					this.OnisFriChanging(value);
					this.SendPropertyChanging();
					this._isFri = value;
					this.SendPropertyChanged("isFri");
					this.OnisFriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSat", DbType="Bit NOT NULL")]
		public bool isSat
		{
			get
			{
				return this._isSat;
			}
			set
			{
				if ((this._isSat != value))
				{
					this.OnisSatChanging(value);
					this.SendPropertyChanging();
					this._isSat = value;
					this.SendPropertyChanged("isSat");
					this.OnisSatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isSun", DbType="Bit NOT NULL")]
		public bool isSun
		{
			get
			{
				return this._isSun;
			}
			set
			{
				if ((this._isSun != value))
				{
					this.OnisSunChanging(value);
					this.SendPropertyChanging();
					this._isSun = value;
					this.SendPropertyChanged("isSun");
					this.OnisSunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEnabled", DbType="Bit NOT NULL")]
		public bool IsEnabled
		{
			get
			{
				return this._IsEnabled;
			}
			set
			{
				if ((this._IsEnabled != value))
				{
					this.OnIsEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsEnabled = value;
					this.SendPropertyChanged("IsEnabled");
					this.OnIsEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleID
		{
			get
			{
				return this._ScheduleID;
			}
			set
			{
				if ((this._ScheduleID != value))
				{
					this.OnScheduleIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleID = value;
					this.SendPropertyChanged("ScheduleID");
					this.OnScheduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Schedule", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trips")]
	public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DriverUID;
		
		private int _PassengerUID;
		
		private bool _isConfirmed;
		
		private System.DateTime _TimeStamp;
		
		private double _Longtitude;
		
		private double _Latitude;
		
		private bool _isForEvening;
		
		private bool _isRepeat;
		
		private bool _isFromDriver;
		
		private EntityRef<User> _Driver;
		
		private EntityRef<User> _Passenger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDriverUIDChanging(int value);
    partial void OnDriverUIDChanged();
    partial void OnPassengerUIDChanging(int value);
    partial void OnPassengerUIDChanged();
    partial void OnisConfirmedChanging(bool value);
    partial void OnisConfirmedChanged();
    partial void OnPlannedStartTimeChanging(System.DateTime value);
    partial void OnPlannedStartTimeChanged();
    partial void OnLongtitudeChanging(double value);
    partial void OnLongtitudeChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnisToHomeChanging(bool value);
    partial void OnisToHomeChanged();
    partial void OnisRepeatChanging(bool value);
    partial void OnisRepeatChanged();
    partial void OnisFromDriverChanging(bool value);
    partial void OnisFromDriverChanged();
    #endregion
		
		public Trip()
		{
			this._Driver = default(EntityRef<User>);
			this._Passenger = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverUID", DbType="Int NOT NULL")]
		public int DriverUID
		{
			get
			{
				return this._DriverUID;
			}
			set
			{
				if ((this._DriverUID != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverUIDChanging(value);
					this.SendPropertyChanging();
					this._DriverUID = value;
					this.SendPropertyChanged("DriverUID");
					this.OnDriverUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassengerUID", DbType="Int NOT NULL")]
		public int PassengerUID
		{
			get
			{
				return this._PassengerUID;
			}
			set
			{
				if ((this._PassengerUID != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPassengerUIDChanging(value);
					this.SendPropertyChanging();
					this._PassengerUID = value;
					this.SendPropertyChanged("PassengerUID");
					this.OnPassengerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isConfirmed", DbType="Bit NOT NULL")]
		public bool isConfirmed
		{
			get
			{
				return this._isConfirmed;
			}
			set
			{
				if ((this._isConfirmed != value))
				{
					this.OnisConfirmedChanging(value);
					this.SendPropertyChanging();
					this._isConfirmed = value;
					this.SendPropertyChanged("isConfirmed");
					this.OnisConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="TimeStamp", Storage="_TimeStamp", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PlannedStartTime
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnPlannedStartTimeChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("PlannedStartTime");
					this.OnPlannedStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longtitude", DbType="Float NOT NULL")]
		public double Longtitude
		{
			get
			{
				return this._Longtitude;
			}
			set
			{
				if ((this._Longtitude != value))
				{
					this.OnLongtitudeChanging(value);
					this.SendPropertyChanging();
					this._Longtitude = value;
					this.SendPropertyChanged("Longtitude");
					this.OnLongtitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="isForEvening", Storage="_isForEvening", DbType="Bit NOT NULL")]
		public bool isToHome
		{
			get
			{
				return this._isForEvening;
			}
			set
			{
				if ((this._isForEvening != value))
				{
					this.OnisToHomeChanging(value);
					this.SendPropertyChanging();
					this._isForEvening = value;
					this.SendPropertyChanged("isToHome");
					this.OnisToHomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isRepeat", DbType="Bit NOT NULL")]
		public bool isRepeat
		{
			get
			{
				return this._isRepeat;
			}
			set
			{
				if ((this._isRepeat != value))
				{
					this.OnisRepeatChanging(value);
					this.SendPropertyChanging();
					this._isRepeat = value;
					this.SendPropertyChanged("isRepeat");
					this.OnisRepeatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFromDriver", DbType="Bit NOT NULL")]
		public bool isFromDriver
		{
			get
			{
				return this._isFromDriver;
			}
			set
			{
				if ((this._isFromDriver != value))
				{
					this.OnisFromDriverChanging(value);
					this.SendPropertyChanging();
					this._isFromDriver = value;
					this.SendPropertyChanged("isFromDriver");
					this.OnisFromDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Trip", Storage="_Driver", ThisKey="DriverUID", OtherKey="UID", IsForeignKey=true)]
		public User Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				User previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.Trips.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.Trips.Add(this);
						this._DriverUID = value.UID;
					}
					else
					{
						this._DriverUID = default(int);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Trip1", Storage="_Passenger", ThisKey="PassengerUID", OtherKey="UID", IsForeignKey=true)]
		public User Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				User previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.Trips1.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.Trips1.Add(this);
						this._PassengerUID = value.UID;
					}
					else
					{
						this._PassengerUID = default(int);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupCompanies")]
	public partial class GroupCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GroupCompanyID;
		
		private int _OrgID;
		
		private EntitySet<Office> _OfficesByGroupCompanyGCID;
		
		private EntitySet<Office> _OfficesByGroupCompanyOrgID;
		
		private EntitySet<Organization> _Organizations;
		
		private EntitySet<OrgEmployee> _OrgEmployees;
		
		private EntityRef<OrgEmployee> _OrgEmployee;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGroupCompanyIDChanging(int value);
    partial void OnGroupCompanyIDChanged();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    #endregion
		
		public GroupCompany()
		{
			this._OfficesByGroupCompanyGCID = new EntitySet<Office>(new Action<Office>(this.attach_OfficesByGroupCompanyGCID), new Action<Office>(this.detach_OfficesByGroupCompanyGCID));
			this._OfficesByGroupCompanyOrgID = new EntitySet<Office>(new Action<Office>(this.attach_OfficesByGroupCompanyOrgID), new Action<Office>(this.detach_OfficesByGroupCompanyOrgID));
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			this._OrgEmployees = new EntitySet<OrgEmployee>(new Action<OrgEmployee>(this.attach_OrgEmployees), new Action<OrgEmployee>(this.detach_OrgEmployees));
			this._OrgEmployee = default(EntityRef<OrgEmployee>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupCompanyID", DbType="Int NOT NULL")]
		public int GroupCompanyID
		{
			get
			{
				return this._GroupCompanyID;
			}
			set
			{
				if ((this._GroupCompanyID != value))
				{
					this.OnGroupCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._GroupCompanyID = value;
					this.SendPropertyChanged("GroupCompanyID");
					this.OnGroupCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="OrganizationID", Storage="_OrgID", DbType="Int NOT NULL")]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_Office", Storage="_OfficesByGroupCompanyGCID", ThisKey="GroupCompanyID", OtherKey="GroupCompanyID")]
		public EntitySet<Office> OfficesByGroupCompanyGCID
		{
			get
			{
				return this._OfficesByGroupCompanyGCID;
			}
			set
			{
				this._OfficesByGroupCompanyGCID.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_Office1", Storage="_OfficesByGroupCompanyOrgID", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Office> OfficesByGroupCompanyOrgID
		{
			get
			{
				return this._OfficesByGroupCompanyOrgID;
			}
			set
			{
				this._OfficesByGroupCompanyOrgID.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_Organization", Storage="_Organizations", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GroupCompany_OrgEmployee", Storage="_OrgEmployees", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<OrgEmployee> OrgEmployees
		{
			get
			{
				return this._OrgEmployees;
			}
			set
			{
				this._OrgEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgEmployee_GroupCompany", Storage="_OrgEmployee", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public OrgEmployee OrgEmployee
		{
			get
			{
				return this._OrgEmployee.Entity;
			}
			set
			{
				OrgEmployee previousValue = this._OrgEmployee.Entity;
				if (((previousValue != value) 
							|| (this._OrgEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgEmployee.Entity = null;
						previousValue.GroupCompanies.Remove(this);
					}
					this._OrgEmployee.Entity = value;
					if ((value != null))
					{
						value.GroupCompanies.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("OrgEmployee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_GroupCompany", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.GroupCompanies.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.GroupCompanies.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OfficesByGroupCompanyGCID(Office entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompanyByGCID = this;
		}
		
		private void detach_OfficesByGroupCompanyGCID(Office entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompanyByGCID = null;
		}
		
		private void attach_OfficesByGroupCompanyOrgID(Office entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompanyByOrgID = this;
		}
		
		private void detach_OfficesByGroupCompanyOrgID(Office entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompanyByOrgID = null;
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompany = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompany = null;
		}
		
		private void attach_OrgEmployees(OrgEmployee entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompany = this;
		}
		
		private void detach_OrgEmployees(OrgEmployee entity)
		{
			this.SendPropertyChanging();
			entity.GroupCompany = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paths")]
	public partial class Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PathID;
		
		private int _UID;
		
		private string _PathName;
		
		private bool _way;
		
		private bool _IsMon;
		
		private bool _IsTue;
		
		private bool _IsWed;
		
		private bool _IsThu;
		
		private bool _IsFri;
		
		private bool _IsSat;
		
		private bool _IsSun;
		
		private EntitySet<User> _Users;
		
		private EntitySet<RoutePoint> _RoutePoints;
		
		private EntityRef<User> _User;
		
		private EntityRef<RoutePoint> _RoutePoint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIDChanging(int value);
    partial void OnPathIDChanged();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnPathNameChanging(string value);
    partial void OnPathNameChanged();
    partial void OnwayChanging(bool value);
    partial void OnwayChanged();
    partial void OnIsMonChanging(bool value);
    partial void OnIsMonChanged();
    partial void OnIsTueChanging(bool value);
    partial void OnIsTueChanged();
    partial void OnIsWedChanging(bool value);
    partial void OnIsWedChanged();
    partial void OnIsThuChanging(bool value);
    partial void OnIsThuChanged();
    partial void OnIsFriChanging(bool value);
    partial void OnIsFriChanged();
    partial void OnIsSatChanging(bool value);
    partial void OnIsSatChanged();
    partial void OnIsSunChanging(bool value);
    partial void OnIsSunChanged();
    #endregion
		
		public Path()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._RoutePoints = new EntitySet<RoutePoint>(new Action<RoutePoint>(this.attach_RoutePoints), new Action<RoutePoint>(this.detach_RoutePoints));
			this._User = default(EntityRef<User>);
			this._RoutePoint = default(EntityRef<RoutePoint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					if (this._RoutePoint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIDChanging(value);
					this.SendPropertyChanging();
					this._PathID = value;
					this.SendPropertyChanged("PathID");
					this.OnPathIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL")]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathName", DbType="NVarChar(50)")]
		public string PathName
		{
			get
			{
				return this._PathName;
			}
			set
			{
				if ((this._PathName != value))
				{
					this.OnPathNameChanging(value);
					this.SendPropertyChanging();
					this._PathName = value;
					this.SendPropertyChanged("PathName");
					this.OnPathNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_way", DbType="Bit NOT NULL")]
		public bool way
		{
			get
			{
				return this._way;
			}
			set
			{
				if ((this._way != value))
				{
					this.OnwayChanging(value);
					this.SendPropertyChanging();
					this._way = value;
					this.SendPropertyChanged("way");
					this.OnwayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMon", DbType="Bit NOT NULL")]
		public bool IsMon
		{
			get
			{
				return this._IsMon;
			}
			set
			{
				if ((this._IsMon != value))
				{
					this.OnIsMonChanging(value);
					this.SendPropertyChanging();
					this._IsMon = value;
					this.SendPropertyChanged("IsMon");
					this.OnIsMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTue", DbType="Bit NOT NULL")]
		public bool IsTue
		{
			get
			{
				return this._IsTue;
			}
			set
			{
				if ((this._IsTue != value))
				{
					this.OnIsTueChanging(value);
					this.SendPropertyChanging();
					this._IsTue = value;
					this.SendPropertyChanged("IsTue");
					this.OnIsTueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWed", DbType="Bit NOT NULL")]
		public bool IsWed
		{
			get
			{
				return this._IsWed;
			}
			set
			{
				if ((this._IsWed != value))
				{
					this.OnIsWedChanging(value);
					this.SendPropertyChanging();
					this._IsWed = value;
					this.SendPropertyChanged("IsWed");
					this.OnIsWedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsThu", DbType="Bit NOT NULL")]
		public bool IsThu
		{
			get
			{
				return this._IsThu;
			}
			set
			{
				if ((this._IsThu != value))
				{
					this.OnIsThuChanging(value);
					this.SendPropertyChanging();
					this._IsThu = value;
					this.SendPropertyChanged("IsThu");
					this.OnIsThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFri", DbType="Bit NOT NULL")]
		public bool IsFri
		{
			get
			{
				return this._IsFri;
			}
			set
			{
				if ((this._IsFri != value))
				{
					this.OnIsFriChanging(value);
					this.SendPropertyChanging();
					this._IsFri = value;
					this.SendPropertyChanged("IsFri");
					this.OnIsFriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSat", DbType="Bit NOT NULL")]
		public bool IsSat
		{
			get
			{
				return this._IsSat;
			}
			set
			{
				if ((this._IsSat != value))
				{
					this.OnIsSatChanging(value);
					this.SendPropertyChanging();
					this._IsSat = value;
					this.SendPropertyChanged("IsSat");
					this.OnIsSatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSun", DbType="Bit NOT NULL")]
		public bool IsSun
		{
			get
			{
				return this._IsSun;
			}
			set
			{
				if ((this._IsSun != value))
				{
					this.OnIsSunChanging(value);
					this.SendPropertyChanging();
					this._IsSun = value;
					this.SendPropertyChanged("IsSun");
					this.OnIsSunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Path_User", Storage="_Users", ThisKey="UID", OtherKey="UID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Path_RoutePoint", Storage="_RoutePoints", ThisKey="PathID", OtherKey="PathID")]
		public EntitySet<RoutePoint> RoutePoints
		{
			get
			{
				return this._RoutePoints;
			}
			set
			{
				this._RoutePoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Path", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Paths.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Paths.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoutePoint_Path", Storage="_RoutePoint", ThisKey="PathID", OtherKey="PathID", IsForeignKey=true)]
		public RoutePoint RoutePoint
		{
			get
			{
				return this._RoutePoint.Entity;
			}
			set
			{
				RoutePoint previousValue = this._RoutePoint.Entity;
				if (((previousValue != value) 
							|| (this._RoutePoint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoutePoint.Entity = null;
						previousValue.Paths.Remove(this);
					}
					this._RoutePoint.Entity = value;
					if ((value != null))
					{
						value.Paths.Add(this);
						this._PathID = value.PathID;
					}
					else
					{
						this._PathID = default(int);
					}
					this.SendPropertyChanged("RoutePoint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Path = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Path = null;
		}
		
		private void attach_RoutePoints(RoutePoint entity)
		{
			this.SendPropertyChanging();
			entity.Path = this;
		}
		
		private void detach_RoutePoints(RoutePoint entity)
		{
			this.SendPropertyChanging();
			entity.Path = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colors")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColorID;
		
		private string _ColorName;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    #endregion
		
		public Color()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Car", Storage="_Cars", ThisKey="ColorID", OtherKey="ColorID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
	}
}
#pragma warning restore 1591
