#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CarBuddyServer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CarBuddyDB")]
	public partial class CarBuddyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCurrentPosition(CurrentPosition instance);
    partial void UpdateCurrentPosition(CurrentPosition instance);
    partial void DeleteCurrentPosition(CurrentPosition instance);
    partial void InsertFeedBack(FeedBack instance);
    partial void UpdateFeedBack(FeedBack instance);
    partial void DeleteFeedBack(FeedBack instance);
    partial void InsertHome(Home instance);
    partial void UpdateHome(Home instance);
    partial void DeleteHome(Home instance);
    partial void InsertInvitation(Invitation instance);
    partial void UpdateInvitation(Invitation instance);
    partial void DeleteInvitation(Invitation instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertOffice(Office instance);
    partial void UpdateOffice(Office instance);
    partial void DeleteOffice(Office instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertTrip(Trip instance);
    partial void UpdateTrip(Trip instance);
    partial void DeleteTrip(Trip instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertPath(Path instance);
    partial void UpdatePath(Path instance);
    partial void DeletePath(Path instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCarBrand(CarBrand instance);
    partial void UpdateCarBrand(CarBrand instance);
    partial void DeleteCarBrand(CarBrand instance);
    partial void InsertCarModel(CarModel instance);
    partial void UpdateCarModel(CarModel instance);
    partial void DeleteCarModel(CarModel instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    #endregion
		
		public CarBuddyDataContext() : 
				base(global::CarBuddyServer.Properties.Settings.Default.CarBuddyDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CarBuddyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarBuddyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarBuddyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CarBuddyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CurrentPosition> CurrentPositions
		{
			get
			{
				return this.GetTable<CurrentPosition>();
			}
		}
		
		public System.Data.Linq.Table<FeedBack> FeedBacks
		{
			get
			{
				return this.GetTable<FeedBack>();
			}
		}
		
		public System.Data.Linq.Table<Home> Homes
		{
			get
			{
				return this.GetTable<Home>();
			}
		}
		
		public System.Data.Linq.Table<Invitation> Invitations
		{
			get
			{
				return this.GetTable<Invitation>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Office> Offices
		{
			get
			{
				return this.GetTable<Office>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Trip> Trips
		{
			get
			{
				return this.GetTable<Trip>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Path> Paths
		{
			get
			{
				return this.GetTable<Path>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<CarBrand> CarBrands
		{
			get
			{
				return this.GetTable<CarBrand>();
			}
		}
		
		public System.Data.Linq.Table<CarModel> CarModels
		{
			get
			{
				return this.GetTable<CarModel>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private string _Name;
		
		private string _AESKey;
		
		private System.Nullable<int> _Moderator;
		
		private string _Password;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAESKeyChanging(string value);
    partial void OnAESKeyChanged();
    partial void OnModeratorChanging(System.Nullable<int> value);
    partial void OnModeratorChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Company()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AESKey", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string AESKey
		{
			get
			{
				return this._AESKey;
			}
			set
			{
				if ((this._AESKey != value))
				{
					this.OnAESKeyChanging(value);
					this.SendPropertyChanging();
					this._AESKey = value;
					this.SendPropertyChanged("AESKey");
					this.OnAESKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Moderator", DbType="Int")]
		public System.Nullable<int> Moderator
		{
			get
			{
				return this._Moderator;
			}
			set
			{
				if ((this._Moderator != value))
				{
					this.OnModeratorChanging(value);
					this.SendPropertyChanging();
					this._Moderator = value;
					this.SendPropertyChanged("Moderator");
					this.OnModeratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Company", Storage="_User", ThisKey="CompanyID", OtherKey="CompanyID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._CompanyID = value.CompanyID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentPositions")]
	public partial class CurrentPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<double> _latitude;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    #endregion
		
		public CurrentPosition()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentPosition", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CurrentPositions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CurrentPositions.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedBacks")]
	public partial class FeedBack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _FromUID;
		
		private System.Nullable<int> _ToUID;
		
		private string _Message;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _TripID;
		
		private System.Nullable<byte> _Rate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFromUIDChanging(System.Nullable<int> value);
    partial void OnFromUIDChanged();
    partial void OnToUIDChanging(System.Nullable<int> value);
    partial void OnToUIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTripIDChanging(System.Nullable<int> value);
    partial void OnTripIDChanged();
    partial void OnRateChanging(System.Nullable<byte> value);
    partial void OnRateChanged();
    #endregion
		
		public FeedBack()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromUID", DbType="Int")]
		public System.Nullable<int> FromUID
		{
			get
			{
				return this._FromUID;
			}
			set
			{
				if ((this._FromUID != value))
				{
					this.OnFromUIDChanging(value);
					this.SendPropertyChanging();
					this._FromUID = value;
					this.SendPropertyChanged("FromUID");
					this.OnFromUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToUID", DbType="Int")]
		public System.Nullable<int> ToUID
		{
			get
			{
				return this._ToUID;
			}
			set
			{
				if ((this._ToUID != value))
				{
					this.OnToUIDChanging(value);
					this.SendPropertyChanging();
					this._ToUID = value;
					this.SendPropertyChanged("ToUID");
					this.OnToUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TripID", DbType="Int")]
		public System.Nullable<int> TripID
		{
			get
			{
				return this._TripID;
			}
			set
			{
				if ((this._TripID != value))
				{
					this.OnTripIDChanging(value);
					this.SendPropertyChanging();
					this._TripID = value;
					this.SendPropertyChanged("TripID");
					this.OnTripIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="TinyInt")]
		public System.Nullable<byte> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Homes")]
	public partial class Home : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<double> _latitude;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    #endregion
		
		public Home()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Home", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Homes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Homes.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invitations")]
	public partial class Invitation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Driver;
		
		private System.Nullable<int> _Passanger;
		
		private System.Nullable<bool> _Confirmation;
		
		private System.Nullable<bool> _isToDriver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDriverChanging(System.Nullable<int> value);
    partial void OnDriverChanged();
    partial void OnPassangerChanging(System.Nullable<int> value);
    partial void OnPassangerChanged();
    partial void OnConfirmationChanging(System.Nullable<bool> value);
    partial void OnConfirmationChanged();
    partial void OnisToDriverChanging(System.Nullable<bool> value);
    partial void OnisToDriverChanged();
    #endregion
		
		public Invitation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver", DbType="Int")]
		public System.Nullable<int> Driver
		{
			get
			{
				return this._Driver;
			}
			set
			{
				if ((this._Driver != value))
				{
					this.OnDriverChanging(value);
					this.SendPropertyChanging();
					this._Driver = value;
					this.SendPropertyChanged("Driver");
					this.OnDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passanger", DbType="Int")]
		public System.Nullable<int> Passanger
		{
			get
			{
				return this._Passanger;
			}
			set
			{
				if ((this._Passanger != value))
				{
					this.OnPassangerChanging(value);
					this.SendPropertyChanging();
					this._Passanger = value;
					this.SendPropertyChanged("Passanger");
					this.OnPassangerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confirmation", DbType="Bit")]
		public System.Nullable<bool> Confirmation
		{
			get
			{
				return this._Confirmation;
			}
			set
			{
				if ((this._Confirmation != value))
				{
					this.OnConfirmationChanging(value);
					this.SendPropertyChanging();
					this._Confirmation = value;
					this.SendPropertyChanged("Confirmation");
					this.OnConfirmationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isToDriver", DbType="Bit")]
		public System.Nullable<bool> isToDriver
		{
			get
			{
				return this._isToDriver;
			}
			set
			{
				if ((this._isToDriver != value))
				{
					this.OnisToDriverChanging(value);
					this.SendPropertyChanging();
					this._isToDriver = value;
					this.SendPropertyChanged("isToDriver");
					this.OnisToDriverChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _From;
		
		private System.Nullable<int> _To;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Text;
		
		private System.Nullable<byte> _Code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFromChanging(System.Nullable<int> value);
    partial void OnFromChanged();
    partial void OnToChanging(System.Nullable<int> value);
    partial void OnToChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCodeChanging(System.Nullable<byte> value);
    partial void OnCodeChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="Int")]
		public System.Nullable<int> From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="Int")]
		public System.Nullable<int> To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="TinyInt")]
		public System.Nullable<byte> Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offices")]
	public partial class Office : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OfficeID;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<double> _latitude;
		
		private string _Name;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfficeIDChanging(int value);
    partial void OnOfficeIDChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Office()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OfficeID
		{
			get
			{
				return this._OfficeID;
			}
			set
			{
				if ((this._OfficeID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOfficeIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeID = value;
					this.SendPropertyChanged("OfficeID");
					this.OnOfficeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Office", Storage="_User", ThisKey="OfficeID", OtherKey="OfficeID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Offices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Offices.Add(this);
						this._OfficeID = value.OfficeID;
					}
					else
					{
						this._OfficeID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registrations")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _Mail;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private System.Nullable<byte> _ErrorAtempts;
		
		private string _Password;
		
		private string _RSApublic;
		
		private string _RSAprivate;
		
		private System.Nullable<bool> _isConfirmed;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    partial void OnErrorsChanging(System.Nullable<byte> value);
    partial void OnErrorsChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRSApublicChanging(string value);
    partial void OnRSApublicChanged();
    partial void OnRSAprivateChanging(string value);
    partial void OnRSAprivateChanged();
    partial void OnisConfirmedChanging(System.Nullable<bool> value);
    partial void OnisConfirmedChanged();
    #endregion
		
		public Registration()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NVarChar(320) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorAtempts", DbType="TinyInt")]
		public System.Nullable<byte> Errors
		{
			get
			{
				return this._ErrorAtempts;
			}
			set
			{
				if ((this._ErrorAtempts != value))
				{
					this.OnErrorsChanging(value);
					this.SendPropertyChanging();
					this._ErrorAtempts = value;
					this.SendPropertyChanged("Errors");
					this.OnErrorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(10)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSApublic", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string RSApublic
		{
			get
			{
				return this._RSApublic;
			}
			set
			{
				if ((this._RSApublic != value))
				{
					this.OnRSApublicChanging(value);
					this.SendPropertyChanging();
					this._RSApublic = value;
					this.SendPropertyChanged("RSApublic");
					this.OnRSApublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSAprivate", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string RSAprivate
		{
			get
			{
				return this._RSAprivate;
			}
			set
			{
				if ((this._RSAprivate != value))
				{
					this.OnRSAprivateChanging(value);
					this.SendPropertyChanging();
					this._RSAprivate = value;
					this.SendPropertyChanged("RSAprivate");
					this.OnRSAprivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isConfirmed", DbType="Bit")]
		public System.Nullable<bool> isConfirmed
		{
			get
			{
				return this._isConfirmed;
			}
			set
			{
				if ((this._isConfirmed != value))
				{
					this.OnisConfirmedChanging(value);
					this.SendPropertyChanging();
					this._isConfirmed = value;
					this.SendPropertyChanged("isConfirmed");
					this.OnisConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Routes")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RouteId;
		
		private System.Nullable<int> _UID;
		
		private System.Nullable<byte> _order;
		
		private System.Nullable<bool> _way;
		
		private System.Nullable<bool> _isActualMon;
		
		private System.Nullable<bool> _isActualTue;
		
		private System.Nullable<bool> _isActualWed;
		
		private System.Nullable<bool> _isActualThu;
		
		private System.Nullable<bool> _isActualFri;
		
		private System.Nullable<bool> _isActualSat;
		
		private System.Nullable<bool> _isActualSun;
		
		private EntityRef<User> _User;
		
		private EntityRef<Path> _Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteIdChanging(int value);
    partial void OnRouteIdChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnorderChanging(System.Nullable<byte> value);
    partial void OnorderChanged();
    partial void OnwayChanging(System.Nullable<bool> value);
    partial void OnwayChanged();
    partial void OnisActualMonChanging(System.Nullable<bool> value);
    partial void OnisActualMonChanged();
    partial void OnisActualTueChanging(System.Nullable<bool> value);
    partial void OnisActualTueChanged();
    partial void OnisActualWedChanging(System.Nullable<bool> value);
    partial void OnisActualWedChanged();
    partial void OnisActualThuChanging(System.Nullable<bool> value);
    partial void OnisActualThuChanged();
    partial void OnisActualFriChanging(System.Nullable<bool> value);
    partial void OnisActualFriChanged();
    partial void OnisActualSatChanging(System.Nullable<bool> value);
    partial void OnisActualSatChanged();
    partial void OnisActualSunChanging(System.Nullable<bool> value);
    partial void OnisActualSunChanged();
    #endregion
		
		public Route()
		{
			this._User = default(EntityRef<User>);
			this._Path = default(EntityRef<Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					if (this._Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[order]", Storage="_order", DbType="TinyInt")]
		public System.Nullable<byte> order
		{
			get
			{
				return this._order;
			}
			set
			{
				if ((this._order != value))
				{
					this.OnorderChanging(value);
					this.SendPropertyChanging();
					this._order = value;
					this.SendPropertyChanged("order");
					this.OnorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_way", DbType="Bit")]
		public System.Nullable<bool> way
		{
			get
			{
				return this._way;
			}
			set
			{
				if ((this._way != value))
				{
					this.OnwayChanging(value);
					this.SendPropertyChanging();
					this._way = value;
					this.SendPropertyChanged("way");
					this.OnwayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActualMon", DbType="Bit")]
		public System.Nullable<bool> isActualMon
		{
			get
			{
				return this._isActualMon;
			}
			set
			{
				if ((this._isActualMon != value))
				{
					this.OnisActualMonChanging(value);
					this.SendPropertyChanging();
					this._isActualMon = value;
					this.SendPropertyChanged("isActualMon");
					this.OnisActualMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActualTue", DbType="Bit")]
		public System.Nullable<bool> isActualTue
		{
			get
			{
				return this._isActualTue;
			}
			set
			{
				if ((this._isActualTue != value))
				{
					this.OnisActualTueChanging(value);
					this.SendPropertyChanging();
					this._isActualTue = value;
					this.SendPropertyChanged("isActualTue");
					this.OnisActualTueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActualWed", DbType="Bit")]
		public System.Nullable<bool> isActualWed
		{
			get
			{
				return this._isActualWed;
			}
			set
			{
				if ((this._isActualWed != value))
				{
					this.OnisActualWedChanging(value);
					this.SendPropertyChanging();
					this._isActualWed = value;
					this.SendPropertyChanged("isActualWed");
					this.OnisActualWedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActualThu", DbType="Bit")]
		public System.Nullable<bool> isActualThu
		{
			get
			{
				return this._isActualThu;
			}
			set
			{
				if ((this._isActualThu != value))
				{
					this.OnisActualThuChanging(value);
					this.SendPropertyChanging();
					this._isActualThu = value;
					this.SendPropertyChanged("isActualThu");
					this.OnisActualThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActualFri", DbType="Bit")]
		public System.Nullable<bool> isActualFri
		{
			get
			{
				return this._isActualFri;
			}
			set
			{
				if ((this._isActualFri != value))
				{
					this.OnisActualFriChanging(value);
					this.SendPropertyChanging();
					this._isActualFri = value;
					this.SendPropertyChanged("isActualFri");
					this.OnisActualFriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActualSat", DbType="Bit")]
		public System.Nullable<bool> isActualSat
		{
			get
			{
				return this._isActualSat;
			}
			set
			{
				if ((this._isActualSat != value))
				{
					this.OnisActualSatChanging(value);
					this.SendPropertyChanging();
					this._isActualSat = value;
					this.SendPropertyChanged("isActualSat");
					this.OnisActualSatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActualSun", DbType="Bit")]
		public System.Nullable<bool> isActualSun
		{
			get
			{
				return this._isActualSun;
			}
			set
			{
				if ((this._isActualSun != value))
				{
					this.OnisActualSunChanging(value);
					this.SendPropertyChanging();
					this._isActualSun = value;
					this.SendPropertyChanged("isActualSun");
					this.OnisActualSunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Route", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Path_Route", Storage="_Path", ThisKey="RouteId", OtherKey="RouteID", IsForeignKey=true)]
		public Path Path
		{
			get
			{
				return this._Path.Entity;
			}
			set
			{
				Path previousValue = this._Path.Entity;
				if (((previousValue != value) 
							|| (this._Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Path.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._Path.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._RouteId = value.RouteID;
					}
					else
					{
						this._RouteId = default(int);
					}
					this.SendPropertyChanged("Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedules")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private System.Nullable<bool> _way;
		
		private System.Nullable<System.TimeSpan> _Mon;
		
		private System.Nullable<System.TimeSpan> _Tue;
		
		private System.Nullable<System.TimeSpan> _Wed;
		
		private System.Nullable<System.TimeSpan> _Thu;
		
		private System.Nullable<System.TimeSpan> _Fri;
		
		private System.Nullable<System.TimeSpan> _Sat;
		
		private System.Nullable<System.TimeSpan> _Sun;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnwayChanging(System.Nullable<bool> value);
    partial void OnwayChanged();
    partial void OnMonChanging(System.Nullable<System.TimeSpan> value);
    partial void OnMonChanged();
    partial void OnTueChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTueChanged();
    partial void OnWedChanging(System.Nullable<System.TimeSpan> value);
    partial void OnWedChanged();
    partial void OnThuChanging(System.Nullable<System.TimeSpan> value);
    partial void OnThuChanged();
    partial void OnFriChanging(System.Nullable<System.TimeSpan> value);
    partial void OnFriChanged();
    partial void OnSatChanging(System.Nullable<System.TimeSpan> value);
    partial void OnSatChanged();
    partial void OnSunChanging(System.Nullable<System.TimeSpan> value);
    partial void OnSunChanged();
    #endregion
		
		public Schedule()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_way", DbType="Bit")]
		public System.Nullable<bool> way
		{
			get
			{
				return this._way;
			}
			set
			{
				if ((this._way != value))
				{
					this.OnwayChanging(value);
					this.SendPropertyChanging();
					this._way = value;
					this.SendPropertyChanged("way");
					this.OnwayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mon", DbType="Time")]
		public System.Nullable<System.TimeSpan> Mon
		{
			get
			{
				return this._Mon;
			}
			set
			{
				if ((this._Mon != value))
				{
					this.OnMonChanging(value);
					this.SendPropertyChanging();
					this._Mon = value;
					this.SendPropertyChanged("Mon");
					this.OnMonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tue", DbType="Time")]
		public System.Nullable<System.TimeSpan> Tue
		{
			get
			{
				return this._Tue;
			}
			set
			{
				if ((this._Tue != value))
				{
					this.OnTueChanging(value);
					this.SendPropertyChanging();
					this._Tue = value;
					this.SendPropertyChanged("Tue");
					this.OnTueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wed", DbType="Time")]
		public System.Nullable<System.TimeSpan> Wed
		{
			get
			{
				return this._Wed;
			}
			set
			{
				if ((this._Wed != value))
				{
					this.OnWedChanging(value);
					this.SendPropertyChanging();
					this._Wed = value;
					this.SendPropertyChanged("Wed");
					this.OnWedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Thu", DbType="Time")]
		public System.Nullable<System.TimeSpan> Thu
		{
			get
			{
				return this._Thu;
			}
			set
			{
				if ((this._Thu != value))
				{
					this.OnThuChanging(value);
					this.SendPropertyChanging();
					this._Thu = value;
					this.SendPropertyChanged("Thu");
					this.OnThuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fri", DbType="Time")]
		public System.Nullable<System.TimeSpan> Fri
		{
			get
			{
				return this._Fri;
			}
			set
			{
				if ((this._Fri != value))
				{
					this.OnFriChanging(value);
					this.SendPropertyChanging();
					this._Fri = value;
					this.SendPropertyChanged("Fri");
					this.OnFriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sat", DbType="Time")]
		public System.Nullable<System.TimeSpan> Sat
		{
			get
			{
				return this._Sat;
			}
			set
			{
				if ((this._Sat != value))
				{
					this.OnSatChanging(value);
					this.SendPropertyChanging();
					this._Sat = value;
					this.SendPropertyChanged("Sat");
					this.OnSatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sun", DbType="Time")]
		public System.Nullable<System.TimeSpan> Sun
		{
			get
			{
				return this._Sun;
			}
			set
			{
				if ((this._Sun != value))
				{
					this.OnSunChanging(value);
					this.SendPropertyChanging();
					this._Sun = value;
					this.SendPropertyChanged("Sun");
					this.OnSunChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Schedule", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trips")]
	public partial class Trip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Driver;
		
		private System.Nullable<int> _Passenger;
		
		private System.Nullable<bool> _isStarted;
		
		private System.Nullable<bool> _isCompleted;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<System.DateTime> _StartTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDriverChanging(System.Nullable<int> value);
    partial void OnDriverChanged();
    partial void OnPassengerChanging(System.Nullable<int> value);
    partial void OnPassengerChanged();
    partial void OnisStartedChanging(System.Nullable<bool> value);
    partial void OnisStartedChanged();
    partial void OnisCompletedChanging(System.Nullable<bool> value);
    partial void OnisCompletedChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    #endregion
		
		public Trip()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver", DbType="Int")]
		public System.Nullable<int> Driver
		{
			get
			{
				return this._Driver;
			}
			set
			{
				if ((this._Driver != value))
				{
					this.OnDriverChanging(value);
					this.SendPropertyChanging();
					this._Driver = value;
					this.SendPropertyChanged("Driver");
					this.OnDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passenger", DbType="Int")]
		public System.Nullable<int> Passenger
		{
			get
			{
				return this._Passenger;
			}
			set
			{
				if ((this._Passenger != value))
				{
					this.OnPassengerChanging(value);
					this.SendPropertyChanging();
					this._Passenger = value;
					this.SendPropertyChanged("Passenger");
					this.OnPassengerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isStarted", DbType="Bit")]
		public System.Nullable<bool> isStarted
		{
			get
			{
				return this._isStarted;
			}
			set
			{
				if ((this._isStarted != value))
				{
					this.OnisStartedChanging(value);
					this.SendPropertyChanging();
					this._isStarted = value;
					this.SendPropertyChanged("isStarted");
					this.OnisStartedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isCompleted", DbType="Bit")]
		public System.Nullable<bool> isCompleted
		{
			get
			{
				return this._isCompleted;
			}
			set
			{
				if ((this._isCompleted != value))
				{
					this.OnisCompletedChanging(value);
					this.SendPropertyChanging();
					this._isCompleted = value;
					this.SendPropertyChanged("isCompleted");
					this.OnisCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<short> _Phone;
		
		private int _OfficeID;
		
		private int _CompanyID;
		
		private System.Nullable<int> _Payment;
		
		private System.Nullable<decimal> _Rating;
		
		private System.Nullable<bool> _isTAXI;
		
		private System.Nullable<bool> _isDriver;
		
		private System.Nullable<short> _version;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<CurrentPosition> _CurrentPositions;
		
		private EntitySet<Home> _Homes;
		
		private EntitySet<Office> _Offices;
		
		private EntitySet<Registration> _Registrations;
		
		private EntitySet<Route> _Routes;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Car> _Cars;
		
		private EntitySet<Session> _Sessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(System.Nullable<short> value);
    partial void OnPhoneChanged();
    partial void OnOfficeIDChanging(int value);
    partial void OnOfficeIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnPaymentChanging(System.Nullable<int> value);
    partial void OnPaymentChanged();
    partial void OnRatingChanging(System.Nullable<decimal> value);
    partial void OnRatingChanged();
    partial void OnisTAXIChanging(System.Nullable<bool> value);
    partial void OnisTAXIChanged();
    partial void OnisDriverChanging(System.Nullable<bool> value);
    partial void OnisDriverChanged();
    partial void OnversionChanging(System.Nullable<short> value);
    partial void OnversionChanged();
    #endregion
		
		public User()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._CurrentPositions = new EntitySet<CurrentPosition>(new Action<CurrentPosition>(this.attach_CurrentPositions), new Action<CurrentPosition>(this.detach_CurrentPositions));
			this._Homes = new EntitySet<Home>(new Action<Home>(this.attach_Homes), new Action<Home>(this.detach_Homes));
			this._Offices = new EntitySet<Office>(new Action<Office>(this.attach_Offices), new Action<Office>(this.detach_Offices));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="SmallInt")]
		public System.Nullable<short> Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeID", DbType="Int NOT NULL")]
		public int OfficeID
		{
			get
			{
				return this._OfficeID;
			}
			set
			{
				if ((this._OfficeID != value))
				{
					this.OnOfficeIDChanging(value);
					this.SendPropertyChanging();
					this._OfficeID = value;
					this.SendPropertyChanged("OfficeID");
					this.OnOfficeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Int")]
		public System.Nullable<int> Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Decimal(2,1)")]
		public System.Nullable<decimal> Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTAXI", DbType="Bit")]
		public System.Nullable<bool> isTAXI
		{
			get
			{
				return this._isTAXI;
			}
			set
			{
				if ((this._isTAXI != value))
				{
					this.OnisTAXIChanging(value);
					this.SendPropertyChanging();
					this._isTAXI = value;
					this.SendPropertyChanged("isTAXI");
					this.OnisTAXIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDriver", DbType="Bit")]
		public System.Nullable<bool> isDriver
		{
			get
			{
				return this._isDriver;
			}
			set
			{
				if ((this._isDriver != value))
				{
					this.OnisDriverChanging(value);
					this.SendPropertyChanging();
					this._isDriver = value;
					this.SendPropertyChanged("isDriver");
					this.OnisDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_version", DbType="SmallInt")]
		public System.Nullable<short> version
		{
			get
			{
				return this._version;
			}
			set
			{
				if ((this._version != value))
				{
					this.OnversionChanging(value);
					this.SendPropertyChanging();
					this._version = value;
					this.SendPropertyChanged("version");
					this.OnversionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Company", Storage="_Companies", ThisKey="CompanyID", OtherKey="CompanyID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentPosition", Storage="_CurrentPositions", ThisKey="UID", OtherKey="UID")]
		public EntitySet<CurrentPosition> CurrentPositions
		{
			get
			{
				return this._CurrentPositions;
			}
			set
			{
				this._CurrentPositions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Home", Storage="_Homes", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Home> Homes
		{
			get
			{
				return this._Homes;
			}
			set
			{
				this._Homes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Office", Storage="_Offices", ThisKey="OfficeID", OtherKey="OfficeID")]
		public EntitySet<Office> Offices
		{
			get
			{
				return this._Offices;
			}
			set
			{
				this._Offices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_Registrations", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Route", Storage="_Routes", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Schedule", Storage="_Schedules", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_Cars", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Session", Storage="_Sessions", ThisKey="UID", OtherKey="UID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CurrentPositions(CurrentPosition entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CurrentPositions(CurrentPosition entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Homes(Home entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Homes(Home entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Offices(Office entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paths")]
	public partial class Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PathPointId;
		
		private int _RouteID;
		
		private System.Nullable<double> _longitude;
		
		private System.Nullable<double> _latitude;
		
		private System.Nullable<byte> _order;
		
		private EntitySet<Route> _Routes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathPointIdChanging(int value);
    partial void OnPathPointIdChanged();
    partial void OnRouteIDChanging(int value);
    partial void OnRouteIDChanged();
    partial void OnlongitudeChanging(System.Nullable<double> value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(System.Nullable<double> value);
    partial void OnlatitudeChanged();
    partial void OnorderChanging(System.Nullable<byte> value);
    partial void OnorderChanged();
    #endregion
		
		public Path()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathPointId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PathPointId
		{
			get
			{
				return this._PathPointId;
			}
			set
			{
				if ((this._PathPointId != value))
				{
					this.OnPathPointIdChanging(value);
					this.SendPropertyChanging();
					this._PathPointId = value;
					this.SendPropertyChanged("PathPointId");
					this.OnPathPointIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="Int NOT NULL")]
		public int RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Float")]
		public System.Nullable<double> longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Float")]
		public System.Nullable<double> latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[order]", Storage="_order", DbType="TinyInt")]
		public System.Nullable<byte> order
		{
			get
			{
				return this._order;
			}
			set
			{
				if ((this._order != value))
				{
					this.OnorderChanging(value);
					this.SendPropertyChanging();
					this._order = value;
					this.SendPropertyChanged("order");
					this.OnorderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Path_Route", Storage="_Routes", ThisKey="RouteID", OtherKey="RouteId")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Path = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Path = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UID;
		
		private int _CarBrand;
		
		private int _CarModel;
		
		private System.Nullable<byte> _CarCapacity;
		
		private string _CarGovNumber;
		
		private System.Nullable<short> _CarComfort;
		
		private EntitySet<CarBrand> _CarBrands;
		
		private EntitySet<CarModel> _CarModels;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(int value);
    partial void OnUIDChanged();
    partial void OnCarBrandChanging(int value);
    partial void OnCarBrandChanged();
    partial void OnCarModelChanging(int value);
    partial void OnCarModelChanged();
    partial void OnCarCapacityChanging(System.Nullable<byte> value);
    partial void OnCarCapacityChanged();
    partial void OnCarGovNumberChanging(string value);
    partial void OnCarGovNumberChanged();
    partial void OnCarComfortChanging(System.Nullable<short> value);
    partial void OnCarComfortChanged();
    #endregion
		
		public Car()
		{
			this._CarBrands = new EntitySet<CarBrand>(new Action<CarBrand>(this.attach_CarBrands), new Action<CarBrand>(this.detach_CarBrands));
			this._CarModels = new EntitySet<CarModel>(new Action<CarModel>(this.attach_CarModels), new Action<CarModel>(this.detach_CarModels));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarBrand", DbType="Int NOT NULL")]
		public int CarBrand
		{
			get
			{
				return this._CarBrand;
			}
			set
			{
				if ((this._CarBrand != value))
				{
					this.OnCarBrandChanging(value);
					this.SendPropertyChanging();
					this._CarBrand = value;
					this.SendPropertyChanged("CarBrand");
					this.OnCarBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarModel", DbType="Int NOT NULL")]
		public int CarModel
		{
			get
			{
				return this._CarModel;
			}
			set
			{
				if ((this._CarModel != value))
				{
					this.OnCarModelChanging(value);
					this.SendPropertyChanging();
					this._CarModel = value;
					this.SendPropertyChanged("CarModel");
					this.OnCarModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarCapacity", DbType="TinyInt")]
		public System.Nullable<byte> CarCapacity
		{
			get
			{
				return this._CarCapacity;
			}
			set
			{
				if ((this._CarCapacity != value))
				{
					this.OnCarCapacityChanging(value);
					this.SendPropertyChanging();
					this._CarCapacity = value;
					this.SendPropertyChanged("CarCapacity");
					this.OnCarCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarGovNumber", DbType="NVarChar(50)")]
		public string CarGovNumber
		{
			get
			{
				return this._CarGovNumber;
			}
			set
			{
				if ((this._CarGovNumber != value))
				{
					this.OnCarGovNumberChanging(value);
					this.SendPropertyChanging();
					this._CarGovNumber = value;
					this.SendPropertyChanged("CarGovNumber");
					this.OnCarGovNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarComfort", DbType="SmallInt")]
		public System.Nullable<short> CarComfort
		{
			get
			{
				return this._CarComfort;
			}
			set
			{
				if ((this._CarComfort != value))
				{
					this.OnCarComfortChanging(value);
					this.SendPropertyChanging();
					this._CarComfort = value;
					this.SendPropertyChanged("CarComfort");
					this.OnCarComfortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_CarBrand", Storage="_CarBrands", ThisKey="CarBrand", OtherKey="Id")]
		public EntitySet<CarBrand> CarBrands
		{
			get
			{
				return this._CarBrands;
			}
			set
			{
				this._CarBrands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_CarModel", Storage="_CarModels", ThisKey="CarModel", OtherKey="Id")]
		public EntitySet<CarModel> CarModels
		{
			get
			{
				return this._CarModels;
			}
			set
			{
				this._CarModels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Car", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CarBrands(CarBrand entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_CarBrands(CarBrand entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
		
		private void attach_CarModels(CarModel entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_CarModels(CarModel entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarBrands")]
	public partial class CarBrand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Brand;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    #endregion
		
		public CarBrand()
		{
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_CarBrand", Storage="_Car", ThisKey="Id", OtherKey="CarBrand", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.CarBrands.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.CarBrands.Add(this);
						this._Id = value.CarBrand;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarModels")]
	public partial class CarModel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Model;
		
		private EntityRef<Car> _Car;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    #endregion
		
		public CarModel()
		{
			this._Car = default(EntityRef<Car>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Model
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnModelChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Model");
					this.OnModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_CarModel", Storage="_Car", ThisKey="Id", OtherKey="CarModel", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.CarModels.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.CarModels.Add(this);
						this._Id = value.CarModel;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UID;
		
		private string _SessionKey;
		
		private System.Nullable<byte> _Errors;
		
		private System.Nullable<int> _Counter;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUIDChanging(System.Nullable<int> value);
    partial void OnUIDChanged();
    partial void OnSessionKeyChanging(string value);
    partial void OnSessionKeyChanged();
    partial void OnErrorsChanging(System.Nullable<byte> value);
    partial void OnErrorsChanged();
    partial void OnCounterChanging(System.Nullable<int> value);
    partial void OnCounterChanged();
    #endregion
		
		public Session()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="Int")]
		public System.Nullable<int> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionKey", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string SessionKey
		{
			get
			{
				return this._SessionKey;
			}
			set
			{
				if ((this._SessionKey != value))
				{
					this.OnSessionKeyChanging(value);
					this.SendPropertyChanging();
					this._SessionKey = value;
					this.SendPropertyChanged("SessionKey");
					this.OnSessionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Errors", DbType="TinyInt")]
		public System.Nullable<byte> Errors
		{
			get
			{
				return this._Errors;
			}
			set
			{
				if ((this._Errors != value))
				{
					this.OnErrorsChanging(value);
					this.SendPropertyChanging();
					this._Errors = value;
					this.SendPropertyChanged("Errors");
					this.OnErrorsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Counter", DbType="Int")]
		public System.Nullable<int> Counter
		{
			get
			{
				return this._Counter;
			}
			set
			{
				if ((this._Counter != value))
				{
					this.OnCounterChanging(value);
					this.SendPropertyChanging();
					this._Counter = value;
					this.SendPropertyChanged("Counter");
					this.OnCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Session", Storage="_User", ThisKey="UID", OtherKey="UID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._UID = value.UID;
					}
					else
					{
						this._UID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
